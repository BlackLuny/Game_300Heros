// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heroskin.proto

#ifndef PROTOBUF_heroskin_2eproto__INCLUDED
#define PROTOBUF_heroskin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_heroskin_2eproto();
void protobuf_AssignDesc_heroskin_2eproto();
void protobuf_ShutdownFile_heroskin_2eproto();

class heroskin;
class heroskin_c;

// ===================================================================

class heroskin : public ::google::protobuf::Message {
 public:
  heroskin();
  virtual ~heroskin();
  
  heroskin(const heroskin& from);
  
  inline heroskin& operator=(const heroskin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const heroskin& default_instance();
  
  void Swap(heroskin* other);
  
  // implements Message ----------------------------------------------
  
  heroskin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const heroskin& from);
  void MergeFrom(const heroskin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 hero_index = 1;
  inline bool has_hero_index() const;
  inline void clear_hero_index();
  static const int kHeroIndexFieldNumber = 1;
  inline ::google::protobuf::int32 hero_index() const;
  inline void set_hero_index(::google::protobuf::int32 value);
  
  // required int32 skin_index = 2;
  inline bool has_skin_index() const;
  inline void clear_skin_index();
  static const int kSkinIndexFieldNumber = 2;
  inline ::google::protobuf::int32 skin_index() const;
  inline void set_skin_index(::google::protobuf::int32 value);
  
  // required string resource = 3;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 3;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const char* value, size_t size);
  inline ::std::string* mutable_resource();
  inline ::std::string* release_resource();
  
  // optional string select_card_pos = 8;
  inline bool has_select_card_pos() const;
  inline void clear_select_card_pos();
  static const int kSelectCardPosFieldNumber = 8;
  inline const ::std::string& select_card_pos() const;
  inline void set_select_card_pos(const ::std::string& value);
  inline void set_select_card_pos(const char* value);
  inline void set_select_card_pos(const char* value, size_t size);
  inline ::std::string* mutable_select_card_pos();
  inline ::std::string* release_select_card_pos();
  
  // optional string head_box_pos = 9;
  inline bool has_head_box_pos() const;
  inline void clear_head_box_pos();
  static const int kHeadBoxPosFieldNumber = 9;
  inline const ::std::string& head_box_pos() const;
  inline void set_head_box_pos(const ::std::string& value);
  inline void set_head_box_pos(const char* value);
  inline void set_head_box_pos(const char* value, size_t size);
  inline ::std::string* mutable_head_box_pos();
  inline ::std::string* release_head_box_pos();
  
  // optional string str3 = 10;
  inline bool has_str3() const;
  inline void clear_str3();
  static const int kStr3FieldNumber = 10;
  inline const ::std::string& str3() const;
  inline void set_str3(const ::std::string& value);
  inline void set_str3(const char* value);
  inline void set_str3(const char* value, size_t size);
  inline ::std::string* mutable_str3();
  inline ::std::string* release_str3();
  
  // optional string str4 = 11;
  inline bool has_str4() const;
  inline void clear_str4();
  static const int kStr4FieldNumber = 11;
  inline const ::std::string& str4() const;
  inline void set_str4(const ::std::string& value);
  inline void set_str4(const char* value);
  inline void set_str4(const char* value, size_t size);
  inline ::std::string* mutable_str4();
  inline ::std::string* release_str4();
  
  // optional int32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string str5 = 13;
  inline bool has_str5() const;
  inline void clear_str5();
  static const int kStr5FieldNumber = 13;
  inline const ::std::string& str5() const;
  inline void set_str5(const ::std::string& value);
  inline void set_str5(const char* value);
  inline void set_str5(const char* value, size_t size);
  inline ::std::string* mutable_str5();
  inline ::std::string* release_str5();
  
  // optional string str6 = 14;
  inline bool has_str6() const;
  inline void clear_str6();
  static const int kStr6FieldNumber = 14;
  inline const ::std::string& str6() const;
  inline void set_str6(const ::std::string& value);
  inline void set_str6(const char* value);
  inline void set_str6(const char* value, size_t size);
  inline ::std::string* mutable_str6();
  inline ::std::string* release_str6();
  
  // optional string str7 = 15;
  inline bool has_str7() const;
  inline void clear_str7();
  static const int kStr7FieldNumber = 15;
  inline const ::std::string& str7() const;
  inline void set_str7(const ::std::string& value);
  inline void set_str7(const char* value);
  inline void set_str7(const char* value, size_t size);
  inline ::std::string* mutable_str7();
  inline ::std::string* release_str7();
  
  // optional string select_card_wh = 16;
  inline bool has_select_card_wh() const;
  inline void clear_select_card_wh();
  static const int kSelectCardWhFieldNumber = 16;
  inline const ::std::string& select_card_wh() const;
  inline void set_select_card_wh(const ::std::string& value);
  inline void set_select_card_wh(const char* value);
  inline void set_select_card_wh(const char* value, size_t size);
  inline ::std::string* mutable_select_card_wh();
  inline ::std::string* release_select_card_wh();
  
  // optional string head_box_wh = 17;
  inline bool has_head_box_wh() const;
  inline void clear_head_box_wh();
  static const int kHeadBoxWhFieldNumber = 17;
  inline const ::std::string& head_box_wh() const;
  inline void set_head_box_wh(const ::std::string& value);
  inline void set_head_box_wh(const char* value);
  inline void set_head_box_wh(const char* value, size_t size);
  inline ::std::string* mutable_head_box_wh();
  inline ::std::string* release_head_box_wh();
  
  // optional string shop_card_pos = 18;
  inline bool has_shop_card_pos() const;
  inline void clear_shop_card_pos();
  static const int kShopCardPosFieldNumber = 18;
  inline const ::std::string& shop_card_pos() const;
  inline void set_shop_card_pos(const ::std::string& value);
  inline void set_shop_card_pos(const char* value);
  inline void set_shop_card_pos(const char* value, size_t size);
  inline ::std::string* mutable_shop_card_pos();
  inline ::std::string* release_shop_card_pos();
  
  // optional string shop_card_wh = 19;
  inline bool has_shop_card_wh() const;
  inline void clear_shop_card_wh();
  static const int kShopCardWhFieldNumber = 19;
  inline const ::std::string& shop_card_wh() const;
  inline void set_shop_card_wh(const ::std::string& value);
  inline void set_shop_card_wh(const char* value);
  inline void set_shop_card_wh(const char* value, size_t size);
  inline ::std::string* mutable_shop_card_wh();
  inline ::std::string* release_shop_card_wh();
  
  // optional int32 unk = 20;
  inline bool has_unk() const;
  inline void clear_unk();
  static const int kUnkFieldNumber = 20;
  inline ::google::protobuf::int32 unk() const;
  inline void set_unk(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:heroskin)
 private:
  inline void set_has_hero_index();
  inline void clear_has_hero_index();
  inline void set_has_skin_index();
  inline void clear_has_skin_index();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_select_card_pos();
  inline void clear_has_select_card_pos();
  inline void set_has_head_box_pos();
  inline void clear_has_head_box_pos();
  inline void set_has_str3();
  inline void clear_has_str3();
  inline void set_has_str4();
  inline void clear_has_str4();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_str5();
  inline void clear_has_str5();
  inline void set_has_str6();
  inline void clear_has_str6();
  inline void set_has_str7();
  inline void clear_has_str7();
  inline void set_has_select_card_wh();
  inline void clear_has_select_card_wh();
  inline void set_has_head_box_wh();
  inline void clear_has_head_box_wh();
  inline void set_has_shop_card_pos();
  inline void clear_has_shop_card_pos();
  inline void set_has_shop_card_wh();
  inline void clear_has_shop_card_wh();
  inline void set_has_unk();
  inline void clear_has_unk();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 hero_index_;
  ::google::protobuf::int32 skin_index_;
  ::std::string* resource_;
  ::std::string* select_card_pos_;
  ::std::string* head_box_pos_;
  ::std::string* str3_;
  ::std::string* str4_;
  ::std::string* str5_;
  ::std::string* str6_;
  ::std::string* str7_;
  ::std::string* select_card_wh_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 unk_;
  ::std::string* head_box_wh_;
  ::std::string* shop_card_pos_;
  ::std::string* shop_card_wh_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_heroskin_2eproto();
  friend void protobuf_AssignDesc_heroskin_2eproto();
  friend void protobuf_ShutdownFile_heroskin_2eproto();
  
  void InitAsDefaultInstance();
  static heroskin* default_instance_;
};
// -------------------------------------------------------------------

class heroskin_c : public ::google::protobuf::Message {
 public:
  heroskin_c();
  virtual ~heroskin_c();
  
  heroskin_c(const heroskin_c& from);
  
  inline heroskin_c& operator=(const heroskin_c& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const heroskin_c& default_instance();
  
  void Swap(heroskin_c* other);
  
  // implements Message ----------------------------------------------
  
  heroskin_c* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const heroskin_c& from);
  void MergeFrom(const heroskin_c& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .heroskin skins = 1;
  inline int skins_size() const;
  inline void clear_skins();
  static const int kSkinsFieldNumber = 1;
  inline const ::heroskin& skins(int index) const;
  inline ::heroskin* mutable_skins(int index);
  inline ::heroskin* add_skins();
  inline const ::google::protobuf::RepeatedPtrField< ::heroskin >&
      skins() const;
  inline ::google::protobuf::RepeatedPtrField< ::heroskin >*
      mutable_skins();
  
  // @@protoc_insertion_point(class_scope:heroskin_c)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::heroskin > skins_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_heroskin_2eproto();
  friend void protobuf_AssignDesc_heroskin_2eproto();
  friend void protobuf_ShutdownFile_heroskin_2eproto();
  
  void InitAsDefaultInstance();
  static heroskin_c* default_instance_;
};
// ===================================================================


// ===================================================================

// heroskin

// required int32 hero_index = 1;
inline bool heroskin::has_hero_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void heroskin::set_has_hero_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void heroskin::clear_has_hero_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void heroskin::clear_hero_index() {
  hero_index_ = 0;
  clear_has_hero_index();
}
inline ::google::protobuf::int32 heroskin::hero_index() const {
  return hero_index_;
}
inline void heroskin::set_hero_index(::google::protobuf::int32 value) {
  set_has_hero_index();
  hero_index_ = value;
}

// required int32 skin_index = 2;
inline bool heroskin::has_skin_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void heroskin::set_has_skin_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void heroskin::clear_has_skin_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void heroskin::clear_skin_index() {
  skin_index_ = 0;
  clear_has_skin_index();
}
inline ::google::protobuf::int32 heroskin::skin_index() const {
  return skin_index_;
}
inline void heroskin::set_skin_index(::google::protobuf::int32 value) {
  set_has_skin_index();
  skin_index_ = value;
}

// required string resource = 3;
inline bool heroskin::has_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void heroskin::set_has_resource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void heroskin::clear_has_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void heroskin::clear_resource() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    resource_->clear();
  }
  clear_has_resource();
}
inline const ::std::string& heroskin::resource() const {
  return *resource_;
}
inline void heroskin::set_resource(const ::std::string& value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void heroskin::set_resource(const char* value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void heroskin::set_resource(const char* value, size_t size) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_resource() {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  return resource_;
}
inline ::std::string* heroskin::release_resource() {
  clear_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_;
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string select_card_pos = 8;
inline bool heroskin::has_select_card_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void heroskin::set_has_select_card_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void heroskin::clear_has_select_card_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void heroskin::clear_select_card_pos() {
  if (select_card_pos_ != &::google::protobuf::internal::kEmptyString) {
    select_card_pos_->clear();
  }
  clear_has_select_card_pos();
}
inline const ::std::string& heroskin::select_card_pos() const {
  return *select_card_pos_;
}
inline void heroskin::set_select_card_pos(const ::std::string& value) {
  set_has_select_card_pos();
  if (select_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    select_card_pos_ = new ::std::string;
  }
  select_card_pos_->assign(value);
}
inline void heroskin::set_select_card_pos(const char* value) {
  set_has_select_card_pos();
  if (select_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    select_card_pos_ = new ::std::string;
  }
  select_card_pos_->assign(value);
}
inline void heroskin::set_select_card_pos(const char* value, size_t size) {
  set_has_select_card_pos();
  if (select_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    select_card_pos_ = new ::std::string;
  }
  select_card_pos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_select_card_pos() {
  set_has_select_card_pos();
  if (select_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    select_card_pos_ = new ::std::string;
  }
  return select_card_pos_;
}
inline ::std::string* heroskin::release_select_card_pos() {
  clear_has_select_card_pos();
  if (select_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = select_card_pos_;
    select_card_pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string head_box_pos = 9;
inline bool heroskin::has_head_box_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void heroskin::set_has_head_box_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void heroskin::clear_has_head_box_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void heroskin::clear_head_box_pos() {
  if (head_box_pos_ != &::google::protobuf::internal::kEmptyString) {
    head_box_pos_->clear();
  }
  clear_has_head_box_pos();
}
inline const ::std::string& heroskin::head_box_pos() const {
  return *head_box_pos_;
}
inline void heroskin::set_head_box_pos(const ::std::string& value) {
  set_has_head_box_pos();
  if (head_box_pos_ == &::google::protobuf::internal::kEmptyString) {
    head_box_pos_ = new ::std::string;
  }
  head_box_pos_->assign(value);
}
inline void heroskin::set_head_box_pos(const char* value) {
  set_has_head_box_pos();
  if (head_box_pos_ == &::google::protobuf::internal::kEmptyString) {
    head_box_pos_ = new ::std::string;
  }
  head_box_pos_->assign(value);
}
inline void heroskin::set_head_box_pos(const char* value, size_t size) {
  set_has_head_box_pos();
  if (head_box_pos_ == &::google::protobuf::internal::kEmptyString) {
    head_box_pos_ = new ::std::string;
  }
  head_box_pos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_head_box_pos() {
  set_has_head_box_pos();
  if (head_box_pos_ == &::google::protobuf::internal::kEmptyString) {
    head_box_pos_ = new ::std::string;
  }
  return head_box_pos_;
}
inline ::std::string* heroskin::release_head_box_pos() {
  clear_has_head_box_pos();
  if (head_box_pos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_box_pos_;
    head_box_pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str3 = 10;
inline bool heroskin::has_str3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void heroskin::set_has_str3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void heroskin::clear_has_str3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void heroskin::clear_str3() {
  if (str3_ != &::google::protobuf::internal::kEmptyString) {
    str3_->clear();
  }
  clear_has_str3();
}
inline const ::std::string& heroskin::str3() const {
  return *str3_;
}
inline void heroskin::set_str3(const ::std::string& value) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(value);
}
inline void heroskin::set_str3(const char* value) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(value);
}
inline void heroskin::set_str3(const char* value, size_t size) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_str3() {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  return str3_;
}
inline ::std::string* heroskin::release_str3() {
  clear_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str3_;
    str3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str4 = 11;
inline bool heroskin::has_str4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void heroskin::set_has_str4() {
  _has_bits_[0] |= 0x00000040u;
}
inline void heroskin::clear_has_str4() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void heroskin::clear_str4() {
  if (str4_ != &::google::protobuf::internal::kEmptyString) {
    str4_->clear();
  }
  clear_has_str4();
}
inline const ::std::string& heroskin::str4() const {
  return *str4_;
}
inline void heroskin::set_str4(const ::std::string& value) {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  str4_->assign(value);
}
inline void heroskin::set_str4(const char* value) {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  str4_->assign(value);
}
inline void heroskin::set_str4(const char* value, size_t size) {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  str4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_str4() {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  return str4_;
}
inline ::std::string* heroskin::release_str4() {
  clear_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str4_;
    str4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 12;
inline bool heroskin::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void heroskin::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void heroskin::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void heroskin::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 heroskin::type() const {
  return type_;
}
inline void heroskin::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string str5 = 13;
inline bool heroskin::has_str5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void heroskin::set_has_str5() {
  _has_bits_[0] |= 0x00000100u;
}
inline void heroskin::clear_has_str5() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void heroskin::clear_str5() {
  if (str5_ != &::google::protobuf::internal::kEmptyString) {
    str5_->clear();
  }
  clear_has_str5();
}
inline const ::std::string& heroskin::str5() const {
  return *str5_;
}
inline void heroskin::set_str5(const ::std::string& value) {
  set_has_str5();
  if (str5_ == &::google::protobuf::internal::kEmptyString) {
    str5_ = new ::std::string;
  }
  str5_->assign(value);
}
inline void heroskin::set_str5(const char* value) {
  set_has_str5();
  if (str5_ == &::google::protobuf::internal::kEmptyString) {
    str5_ = new ::std::string;
  }
  str5_->assign(value);
}
inline void heroskin::set_str5(const char* value, size_t size) {
  set_has_str5();
  if (str5_ == &::google::protobuf::internal::kEmptyString) {
    str5_ = new ::std::string;
  }
  str5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_str5() {
  set_has_str5();
  if (str5_ == &::google::protobuf::internal::kEmptyString) {
    str5_ = new ::std::string;
  }
  return str5_;
}
inline ::std::string* heroskin::release_str5() {
  clear_has_str5();
  if (str5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str5_;
    str5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str6 = 14;
inline bool heroskin::has_str6() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void heroskin::set_has_str6() {
  _has_bits_[0] |= 0x00000200u;
}
inline void heroskin::clear_has_str6() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void heroskin::clear_str6() {
  if (str6_ != &::google::protobuf::internal::kEmptyString) {
    str6_->clear();
  }
  clear_has_str6();
}
inline const ::std::string& heroskin::str6() const {
  return *str6_;
}
inline void heroskin::set_str6(const ::std::string& value) {
  set_has_str6();
  if (str6_ == &::google::protobuf::internal::kEmptyString) {
    str6_ = new ::std::string;
  }
  str6_->assign(value);
}
inline void heroskin::set_str6(const char* value) {
  set_has_str6();
  if (str6_ == &::google::protobuf::internal::kEmptyString) {
    str6_ = new ::std::string;
  }
  str6_->assign(value);
}
inline void heroskin::set_str6(const char* value, size_t size) {
  set_has_str6();
  if (str6_ == &::google::protobuf::internal::kEmptyString) {
    str6_ = new ::std::string;
  }
  str6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_str6() {
  set_has_str6();
  if (str6_ == &::google::protobuf::internal::kEmptyString) {
    str6_ = new ::std::string;
  }
  return str6_;
}
inline ::std::string* heroskin::release_str6() {
  clear_has_str6();
  if (str6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str6_;
    str6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str7 = 15;
inline bool heroskin::has_str7() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void heroskin::set_has_str7() {
  _has_bits_[0] |= 0x00000400u;
}
inline void heroskin::clear_has_str7() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void heroskin::clear_str7() {
  if (str7_ != &::google::protobuf::internal::kEmptyString) {
    str7_->clear();
  }
  clear_has_str7();
}
inline const ::std::string& heroskin::str7() const {
  return *str7_;
}
inline void heroskin::set_str7(const ::std::string& value) {
  set_has_str7();
  if (str7_ == &::google::protobuf::internal::kEmptyString) {
    str7_ = new ::std::string;
  }
  str7_->assign(value);
}
inline void heroskin::set_str7(const char* value) {
  set_has_str7();
  if (str7_ == &::google::protobuf::internal::kEmptyString) {
    str7_ = new ::std::string;
  }
  str7_->assign(value);
}
inline void heroskin::set_str7(const char* value, size_t size) {
  set_has_str7();
  if (str7_ == &::google::protobuf::internal::kEmptyString) {
    str7_ = new ::std::string;
  }
  str7_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_str7() {
  set_has_str7();
  if (str7_ == &::google::protobuf::internal::kEmptyString) {
    str7_ = new ::std::string;
  }
  return str7_;
}
inline ::std::string* heroskin::release_str7() {
  clear_has_str7();
  if (str7_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str7_;
    str7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string select_card_wh = 16;
inline bool heroskin::has_select_card_wh() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void heroskin::set_has_select_card_wh() {
  _has_bits_[0] |= 0x00000800u;
}
inline void heroskin::clear_has_select_card_wh() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void heroskin::clear_select_card_wh() {
  if (select_card_wh_ != &::google::protobuf::internal::kEmptyString) {
    select_card_wh_->clear();
  }
  clear_has_select_card_wh();
}
inline const ::std::string& heroskin::select_card_wh() const {
  return *select_card_wh_;
}
inline void heroskin::set_select_card_wh(const ::std::string& value) {
  set_has_select_card_wh();
  if (select_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    select_card_wh_ = new ::std::string;
  }
  select_card_wh_->assign(value);
}
inline void heroskin::set_select_card_wh(const char* value) {
  set_has_select_card_wh();
  if (select_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    select_card_wh_ = new ::std::string;
  }
  select_card_wh_->assign(value);
}
inline void heroskin::set_select_card_wh(const char* value, size_t size) {
  set_has_select_card_wh();
  if (select_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    select_card_wh_ = new ::std::string;
  }
  select_card_wh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_select_card_wh() {
  set_has_select_card_wh();
  if (select_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    select_card_wh_ = new ::std::string;
  }
  return select_card_wh_;
}
inline ::std::string* heroskin::release_select_card_wh() {
  clear_has_select_card_wh();
  if (select_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = select_card_wh_;
    select_card_wh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string head_box_wh = 17;
inline bool heroskin::has_head_box_wh() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void heroskin::set_has_head_box_wh() {
  _has_bits_[0] |= 0x00001000u;
}
inline void heroskin::clear_has_head_box_wh() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void heroskin::clear_head_box_wh() {
  if (head_box_wh_ != &::google::protobuf::internal::kEmptyString) {
    head_box_wh_->clear();
  }
  clear_has_head_box_wh();
}
inline const ::std::string& heroskin::head_box_wh() const {
  return *head_box_wh_;
}
inline void heroskin::set_head_box_wh(const ::std::string& value) {
  set_has_head_box_wh();
  if (head_box_wh_ == &::google::protobuf::internal::kEmptyString) {
    head_box_wh_ = new ::std::string;
  }
  head_box_wh_->assign(value);
}
inline void heroskin::set_head_box_wh(const char* value) {
  set_has_head_box_wh();
  if (head_box_wh_ == &::google::protobuf::internal::kEmptyString) {
    head_box_wh_ = new ::std::string;
  }
  head_box_wh_->assign(value);
}
inline void heroskin::set_head_box_wh(const char* value, size_t size) {
  set_has_head_box_wh();
  if (head_box_wh_ == &::google::protobuf::internal::kEmptyString) {
    head_box_wh_ = new ::std::string;
  }
  head_box_wh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_head_box_wh() {
  set_has_head_box_wh();
  if (head_box_wh_ == &::google::protobuf::internal::kEmptyString) {
    head_box_wh_ = new ::std::string;
  }
  return head_box_wh_;
}
inline ::std::string* heroskin::release_head_box_wh() {
  clear_has_head_box_wh();
  if (head_box_wh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_box_wh_;
    head_box_wh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shop_card_pos = 18;
inline bool heroskin::has_shop_card_pos() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void heroskin::set_has_shop_card_pos() {
  _has_bits_[0] |= 0x00002000u;
}
inline void heroskin::clear_has_shop_card_pos() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void heroskin::clear_shop_card_pos() {
  if (shop_card_pos_ != &::google::protobuf::internal::kEmptyString) {
    shop_card_pos_->clear();
  }
  clear_has_shop_card_pos();
}
inline const ::std::string& heroskin::shop_card_pos() const {
  return *shop_card_pos_;
}
inline void heroskin::set_shop_card_pos(const ::std::string& value) {
  set_has_shop_card_pos();
  if (shop_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_pos_ = new ::std::string;
  }
  shop_card_pos_->assign(value);
}
inline void heroskin::set_shop_card_pos(const char* value) {
  set_has_shop_card_pos();
  if (shop_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_pos_ = new ::std::string;
  }
  shop_card_pos_->assign(value);
}
inline void heroskin::set_shop_card_pos(const char* value, size_t size) {
  set_has_shop_card_pos();
  if (shop_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_pos_ = new ::std::string;
  }
  shop_card_pos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_shop_card_pos() {
  set_has_shop_card_pos();
  if (shop_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_pos_ = new ::std::string;
  }
  return shop_card_pos_;
}
inline ::std::string* heroskin::release_shop_card_pos() {
  clear_has_shop_card_pos();
  if (shop_card_pos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shop_card_pos_;
    shop_card_pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shop_card_wh = 19;
inline bool heroskin::has_shop_card_wh() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void heroskin::set_has_shop_card_wh() {
  _has_bits_[0] |= 0x00004000u;
}
inline void heroskin::clear_has_shop_card_wh() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void heroskin::clear_shop_card_wh() {
  if (shop_card_wh_ != &::google::protobuf::internal::kEmptyString) {
    shop_card_wh_->clear();
  }
  clear_has_shop_card_wh();
}
inline const ::std::string& heroskin::shop_card_wh() const {
  return *shop_card_wh_;
}
inline void heroskin::set_shop_card_wh(const ::std::string& value) {
  set_has_shop_card_wh();
  if (shop_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_wh_ = new ::std::string;
  }
  shop_card_wh_->assign(value);
}
inline void heroskin::set_shop_card_wh(const char* value) {
  set_has_shop_card_wh();
  if (shop_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_wh_ = new ::std::string;
  }
  shop_card_wh_->assign(value);
}
inline void heroskin::set_shop_card_wh(const char* value, size_t size) {
  set_has_shop_card_wh();
  if (shop_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_wh_ = new ::std::string;
  }
  shop_card_wh_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heroskin::mutable_shop_card_wh() {
  set_has_shop_card_wh();
  if (shop_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    shop_card_wh_ = new ::std::string;
  }
  return shop_card_wh_;
}
inline ::std::string* heroskin::release_shop_card_wh() {
  clear_has_shop_card_wh();
  if (shop_card_wh_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shop_card_wh_;
    shop_card_wh_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 unk = 20;
inline bool heroskin::has_unk() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void heroskin::set_has_unk() {
  _has_bits_[0] |= 0x00008000u;
}
inline void heroskin::clear_has_unk() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void heroskin::clear_unk() {
  unk_ = 0;
  clear_has_unk();
}
inline ::google::protobuf::int32 heroskin::unk() const {
  return unk_;
}
inline void heroskin::set_unk(::google::protobuf::int32 value) {
  set_has_unk();
  unk_ = value;
}

// -------------------------------------------------------------------

// heroskin_c

// repeated .heroskin skins = 1;
inline int heroskin_c::skins_size() const {
  return skins_.size();
}
inline void heroskin_c::clear_skins() {
  skins_.Clear();
}
inline const ::heroskin& heroskin_c::skins(int index) const {
  return skins_.Get(index);
}
inline ::heroskin* heroskin_c::mutable_skins(int index) {
  return skins_.Mutable(index);
}
inline ::heroskin* heroskin_c::add_skins() {
  return skins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::heroskin >&
heroskin_c::skins() const {
  return skins_;
}
inline ::google::protobuf::RepeatedPtrField< ::heroskin >*
heroskin_c::mutable_skins() {
  return &skins_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_heroskin_2eproto__INCLUDED
