// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hero.proto

#ifndef PROTOBUF_Hero_2eproto__INCLUDED
#define PROTOBUF_Hero_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Hero_2eproto();
void protobuf_AssignDesc_Hero_2eproto();
void protobuf_ShutdownFile_Hero_2eproto();

class SHeroSkin;
class SHeroSkinDataPool;

// ===================================================================

class SHeroSkin : public ::google::protobuf::Message {
 public:
  SHeroSkin();
  virtual ~SHeroSkin();
  
  SHeroSkin(const SHeroSkin& from);
  
  inline SHeroSkin& operator=(const SHeroSkin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SHeroSkin& default_instance();
  
  void Swap(SHeroSkin* other);
  
  // implements Message ----------------------------------------------
  
  SHeroSkin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SHeroSkin& from);
  void MergeFrom(const SHeroSkin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 nHeroID = 1;
  inline bool has_nheroid() const;
  inline void clear_nheroid();
  static const int kNHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 nheroid() const;
  inline void set_nheroid(::google::protobuf::uint32 value);
  
  // optional uint32 nSkinID = 2;
  inline bool has_nskinid() const;
  inline void clear_nskinid();
  static const int kNSkinIDFieldNumber = 2;
  inline ::google::protobuf::uint32 nskinid() const;
  inline void set_nskinid(::google::protobuf::uint32 value);
  
  // optional bytes SelectPic = 3;
  inline bool has_selectpic() const;
  inline void clear_selectpic();
  static const int kSelectPicFieldNumber = 3;
  inline const ::std::string& selectpic() const;
  inline void set_selectpic(const ::std::string& value);
  inline void set_selectpic(const char* value);
  inline void set_selectpic(const void* value, size_t size);
  inline ::std::string* mutable_selectpic();
  inline ::std::string* release_selectpic();
  
  // optional string sCMapSkill = 4;
  inline bool has_scmapskill() const;
  inline void clear_scmapskill();
  static const int kSCMapSkillFieldNumber = 4;
  inline const ::std::string& scmapskill() const;
  inline void set_scmapskill(const ::std::string& value);
  inline void set_scmapskill(const char* value);
  inline void set_scmapskill(const char* value, size_t size);
  inline ::std::string* mutable_scmapskill();
  inline ::std::string* release_scmapskill();
  
  // optional string sSmapSkill = 5;
  inline bool has_ssmapskill() const;
  inline void clear_ssmapskill();
  static const int kSSmapSkillFieldNumber = 5;
  inline const ::std::string& ssmapskill() const;
  inline void set_ssmapskill(const ::std::string& value);
  inline void set_ssmapskill(const char* value);
  inline void set_ssmapskill(const char* value, size_t size);
  inline ::std::string* mutable_ssmapskill();
  inline ::std::string* release_ssmapskill();
  
  // optional string sMapOtherAppearance = 6;
  inline bool has_smapotherappearance() const;
  inline void clear_smapotherappearance();
  static const int kSMapOtherAppearanceFieldNumber = 6;
  inline const ::std::string& smapotherappearance() const;
  inline void set_smapotherappearance(const ::std::string& value);
  inline void set_smapotherappearance(const char* value);
  inline void set_smapotherappearance(const char* value, size_t size);
  inline ::std::string* mutable_smapotherappearance();
  inline ::std::string* release_smapotherappearance();
  
  // optional string sSmapOther = 7;
  inline bool has_ssmapother() const;
  inline void clear_ssmapother();
  static const int kSSmapOtherFieldNumber = 7;
  inline const ::std::string& ssmapother() const;
  inline void set_ssmapother(const ::std::string& value);
  inline void set_ssmapother(const char* value);
  inline void set_ssmapother(const char* value, size_t size);
  inline ::std::string* mutable_ssmapother();
  inline ::std::string* release_ssmapother();
  
  // optional string sBeginXY = 8;
  inline bool has_sbeginxy() const;
  inline void clear_sbeginxy();
  static const int kSBeginXYFieldNumber = 8;
  inline const ::std::string& sbeginxy() const;
  inline void set_sbeginxy(const ::std::string& value);
  inline void set_sbeginxy(const char* value);
  inline void set_sbeginxy(const char* value, size_t size);
  inline ::std::string* mutable_sbeginxy();
  inline ::std::string* release_sbeginxy();
  
  // optional string sHeadBeginXY = 9;
  inline bool has_sheadbeginxy() const;
  inline void clear_sheadbeginxy();
  static const int kSHeadBeginXYFieldNumber = 9;
  inline const ::std::string& sheadbeginxy() const;
  inline void set_sheadbeginxy(const ::std::string& value);
  inline void set_sheadbeginxy(const char* value);
  inline void set_sheadbeginxy(const char* value, size_t size);
  inline ::std::string* mutable_sheadbeginxy();
  inline ::std::string* release_sheadbeginxy();
  
  // optional string sbIsChangeVoice = 10;
  inline bool has_sbischangevoice() const;
  inline void clear_sbischangevoice();
  static const int kSbIsChangeVoiceFieldNumber = 10;
  inline const ::std::string& sbischangevoice() const;
  inline void set_sbischangevoice(const ::std::string& value);
  inline void set_sbischangevoice(const char* value);
  inline void set_sbischangevoice(const char* value, size_t size);
  inline ::std::string* mutable_sbischangevoice();
  inline ::std::string* release_sbischangevoice();
  
  // optional string sChagenSkillId = 11;
  inline bool has_schagenskillid() const;
  inline void clear_schagenskillid();
  static const int kSChagenSkillIdFieldNumber = 11;
  inline const ::std::string& schagenskillid() const;
  inline void set_schagenskillid(const ::std::string& value);
  inline void set_schagenskillid(const char* value);
  inline void set_schagenskillid(const char* value, size_t size);
  inline ::std::string* mutable_schagenskillid();
  inline ::std::string* release_schagenskillid();
  
  // optional uint32 nSkinLevel = 12;
  inline bool has_nskinlevel() const;
  inline void clear_nskinlevel();
  static const int kNSkinLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 nskinlevel() const;
  inline void set_nskinlevel(::google::protobuf::uint32 value);
  
  // optional string sChangebulletEffectId = 13;
  inline bool has_schangebulleteffectid() const;
  inline void clear_schangebulleteffectid();
  static const int kSChangebulletEffectIdFieldNumber = 13;
  inline const ::std::string& schangebulleteffectid() const;
  inline void set_schangebulleteffectid(const ::std::string& value);
  inline void set_schangebulleteffectid(const char* value);
  inline void set_schangebulleteffectid(const char* value, size_t size);
  inline ::std::string* mutable_schangebulleteffectid();
  inline ::std::string* release_schangebulleteffectid();
  
  // optional string sChangeStatusEffectId = 14;
  inline bool has_schangestatuseffectid() const;
  inline void clear_schangestatuseffectid();
  static const int kSChangeStatusEffectIdFieldNumber = 14;
  inline const ::std::string& schangestatuseffectid() const;
  inline void set_schangestatuseffectid(const ::std::string& value);
  inline void set_schangestatuseffectid(const char* value);
  inline void set_schangestatuseffectid(const char* value, size_t size);
  inline ::std::string* mutable_schangestatuseffectid();
  inline ::std::string* release_schangestatuseffectid();
  
  // optional string sChangeVoiceEffect = 15;
  inline bool has_schangevoiceeffect() const;
  inline void clear_schangevoiceeffect();
  static const int kSChangeVoiceEffectFieldNumber = 15;
  inline const ::std::string& schangevoiceeffect() const;
  inline void set_schangevoiceeffect(const ::std::string& value);
  inline void set_schangevoiceeffect(const char* value);
  inline void set_schangevoiceeffect(const char* value, size_t size);
  inline ::std::string* mutable_schangevoiceeffect();
  inline ::std::string* release_schangevoiceeffect();
  
  // optional string sSkinwideAndHight = 16;
  inline bool has_sskinwideandhight() const;
  inline void clear_sskinwideandhight();
  static const int kSSkinwideAndHightFieldNumber = 16;
  inline const ::std::string& sskinwideandhight() const;
  inline void set_sskinwideandhight(const ::std::string& value);
  inline void set_sskinwideandhight(const char* value);
  inline void set_sskinwideandhight(const char* value, size_t size);
  inline ::std::string* mutable_sskinwideandhight();
  inline ::std::string* release_sskinwideandhight();
  
  // optional string sHeadwideAndHight = 17;
  inline bool has_sheadwideandhight() const;
  inline void clear_sheadwideandhight();
  static const int kSHeadwideAndHightFieldNumber = 17;
  inline const ::std::string& sheadwideandhight() const;
  inline void set_sheadwideandhight(const ::std::string& value);
  inline void set_sheadwideandhight(const char* value);
  inline void set_sheadwideandhight(const char* value, size_t size);
  inline ::std::string* mutable_sheadwideandhight();
  inline ::std::string* release_sheadwideandhight();
  
  // optional string sbackgroundBeginWideHight = 18;
  inline bool has_sbackgroundbeginwidehight() const;
  inline void clear_sbackgroundbeginwidehight();
  static const int kSbackgroundBeginWideHightFieldNumber = 18;
  inline const ::std::string& sbackgroundbeginwidehight() const;
  inline void set_sbackgroundbeginwidehight(const ::std::string& value);
  inline void set_sbackgroundbeginwidehight(const char* value);
  inline void set_sbackgroundbeginwidehight(const char* value, size_t size);
  inline ::std::string* mutable_sbackgroundbeginwidehight();
  inline ::std::string* release_sbackgroundbeginwidehight();
  
  // optional string sbackgroundendWideHight = 19;
  inline bool has_sbackgroundendwidehight() const;
  inline void clear_sbackgroundendwidehight();
  static const int kSbackgroundendWideHightFieldNumber = 19;
  inline const ::std::string& sbackgroundendwidehight() const;
  inline void set_sbackgroundendwidehight(const ::std::string& value);
  inline void set_sbackgroundendwidehight(const char* value);
  inline void set_sbackgroundendwidehight(const char* value, size_t size);
  inline ::std::string* mutable_sbackgroundendwidehight();
  inline ::std::string* release_sbackgroundendwidehight();
  
  // optional uint32 uModelScale = 20;
  inline bool has_umodelscale() const;
  inline void clear_umodelscale();
  static const int kUModelScaleFieldNumber = 20;
  inline ::google::protobuf::uint32 umodelscale() const;
  inline void set_umodelscale(::google::protobuf::uint32 value);
  
  // optional uint32 uIsChangeIcon = 21;
  inline bool has_uischangeicon() const;
  inline void clear_uischangeicon();
  static const int kUIsChangeIconFieldNumber = 21;
  inline ::google::protobuf::uint32 uischangeicon() const;
  inline void set_uischangeicon(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:SHeroSkin)
 private:
  inline void set_has_nheroid();
  inline void clear_has_nheroid();
  inline void set_has_nskinid();
  inline void clear_has_nskinid();
  inline void set_has_selectpic();
  inline void clear_has_selectpic();
  inline void set_has_scmapskill();
  inline void clear_has_scmapskill();
  inline void set_has_ssmapskill();
  inline void clear_has_ssmapskill();
  inline void set_has_smapotherappearance();
  inline void clear_has_smapotherappearance();
  inline void set_has_ssmapother();
  inline void clear_has_ssmapother();
  inline void set_has_sbeginxy();
  inline void clear_has_sbeginxy();
  inline void set_has_sheadbeginxy();
  inline void clear_has_sheadbeginxy();
  inline void set_has_sbischangevoice();
  inline void clear_has_sbischangevoice();
  inline void set_has_schagenskillid();
  inline void clear_has_schagenskillid();
  inline void set_has_nskinlevel();
  inline void clear_has_nskinlevel();
  inline void set_has_schangebulleteffectid();
  inline void clear_has_schangebulleteffectid();
  inline void set_has_schangestatuseffectid();
  inline void clear_has_schangestatuseffectid();
  inline void set_has_schangevoiceeffect();
  inline void clear_has_schangevoiceeffect();
  inline void set_has_sskinwideandhight();
  inline void clear_has_sskinwideandhight();
  inline void set_has_sheadwideandhight();
  inline void clear_has_sheadwideandhight();
  inline void set_has_sbackgroundbeginwidehight();
  inline void clear_has_sbackgroundbeginwidehight();
  inline void set_has_sbackgroundendwidehight();
  inline void clear_has_sbackgroundendwidehight();
  inline void set_has_umodelscale();
  inline void clear_has_umodelscale();
  inline void set_has_uischangeicon();
  inline void clear_has_uischangeicon();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 nheroid_;
  ::google::protobuf::uint32 nskinid_;
  ::std::string* selectpic_;
  ::std::string* scmapskill_;
  ::std::string* ssmapskill_;
  ::std::string* smapotherappearance_;
  ::std::string* ssmapother_;
  ::std::string* sbeginxy_;
  ::std::string* sheadbeginxy_;
  ::std::string* sbischangevoice_;
  ::std::string* schagenskillid_;
  ::std::string* schangebulleteffectid_;
  ::std::string* schangestatuseffectid_;
  ::std::string* schangevoiceeffect_;
  ::std::string* sskinwideandhight_;
  ::google::protobuf::uint32 nskinlevel_;
  ::google::protobuf::uint32 umodelscale_;
  ::std::string* sheadwideandhight_;
  ::std::string* sbackgroundbeginwidehight_;
  ::std::string* sbackgroundendwidehight_;
  ::google::protobuf::uint32 uischangeicon_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_Hero_2eproto();
  friend void protobuf_AssignDesc_Hero_2eproto();
  friend void protobuf_ShutdownFile_Hero_2eproto();
  
  void InitAsDefaultInstance();
  static SHeroSkin* default_instance_;
};
// -------------------------------------------------------------------

class SHeroSkinDataPool : public ::google::protobuf::Message {
 public:
  SHeroSkinDataPool();
  virtual ~SHeroSkinDataPool();
  
  SHeroSkinDataPool(const SHeroSkinDataPool& from);
  
  inline SHeroSkinDataPool& operator=(const SHeroSkinDataPool& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SHeroSkinDataPool& default_instance();
  
  void Swap(SHeroSkinDataPool* other);
  
  // implements Message ----------------------------------------------
  
  SHeroSkinDataPool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SHeroSkinDataPool& from);
  void MergeFrom(const SHeroSkinDataPool& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SHeroSkin data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::SHeroSkin& data(int index) const;
  inline ::SHeroSkin* mutable_data(int index);
  inline ::SHeroSkin* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SHeroSkin >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SHeroSkin >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:SHeroSkinDataPool)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SHeroSkin > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Hero_2eproto();
  friend void protobuf_AssignDesc_Hero_2eproto();
  friend void protobuf_ShutdownFile_Hero_2eproto();
  
  void InitAsDefaultInstance();
  static SHeroSkinDataPool* default_instance_;
};
// ===================================================================


// ===================================================================

// SHeroSkin

// optional uint32 nHeroID = 1;
inline bool SHeroSkin::has_nheroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SHeroSkin::set_has_nheroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SHeroSkin::clear_has_nheroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SHeroSkin::clear_nheroid() {
  nheroid_ = 0u;
  clear_has_nheroid();
}
inline ::google::protobuf::uint32 SHeroSkin::nheroid() const {
  return nheroid_;
}
inline void SHeroSkin::set_nheroid(::google::protobuf::uint32 value) {
  set_has_nheroid();
  nheroid_ = value;
}

// optional uint32 nSkinID = 2;
inline bool SHeroSkin::has_nskinid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SHeroSkin::set_has_nskinid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SHeroSkin::clear_has_nskinid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SHeroSkin::clear_nskinid() {
  nskinid_ = 0u;
  clear_has_nskinid();
}
inline ::google::protobuf::uint32 SHeroSkin::nskinid() const {
  return nskinid_;
}
inline void SHeroSkin::set_nskinid(::google::protobuf::uint32 value) {
  set_has_nskinid();
  nskinid_ = value;
}

// optional bytes SelectPic = 3;
inline bool SHeroSkin::has_selectpic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SHeroSkin::set_has_selectpic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SHeroSkin::clear_has_selectpic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SHeroSkin::clear_selectpic() {
  if (selectpic_ != &::google::protobuf::internal::kEmptyString) {
    selectpic_->clear();
  }
  clear_has_selectpic();
}
inline const ::std::string& SHeroSkin::selectpic() const {
  return *selectpic_;
}
inline void SHeroSkin::set_selectpic(const ::std::string& value) {
  set_has_selectpic();
  if (selectpic_ == &::google::protobuf::internal::kEmptyString) {
    selectpic_ = new ::std::string;
  }
  selectpic_->assign(value);
}
inline void SHeroSkin::set_selectpic(const char* value) {
  set_has_selectpic();
  if (selectpic_ == &::google::protobuf::internal::kEmptyString) {
    selectpic_ = new ::std::string;
  }
  selectpic_->assign(value);
}
inline void SHeroSkin::set_selectpic(const void* value, size_t size) {
  set_has_selectpic();
  if (selectpic_ == &::google::protobuf::internal::kEmptyString) {
    selectpic_ = new ::std::string;
  }
  selectpic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_selectpic() {
  set_has_selectpic();
  if (selectpic_ == &::google::protobuf::internal::kEmptyString) {
    selectpic_ = new ::std::string;
  }
  return selectpic_;
}
inline ::std::string* SHeroSkin::release_selectpic() {
  clear_has_selectpic();
  if (selectpic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selectpic_;
    selectpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sCMapSkill = 4;
inline bool SHeroSkin::has_scmapskill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SHeroSkin::set_has_scmapskill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SHeroSkin::clear_has_scmapskill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SHeroSkin::clear_scmapskill() {
  if (scmapskill_ != &::google::protobuf::internal::kEmptyString) {
    scmapskill_->clear();
  }
  clear_has_scmapskill();
}
inline const ::std::string& SHeroSkin::scmapskill() const {
  return *scmapskill_;
}
inline void SHeroSkin::set_scmapskill(const ::std::string& value) {
  set_has_scmapskill();
  if (scmapskill_ == &::google::protobuf::internal::kEmptyString) {
    scmapskill_ = new ::std::string;
  }
  scmapskill_->assign(value);
}
inline void SHeroSkin::set_scmapskill(const char* value) {
  set_has_scmapskill();
  if (scmapskill_ == &::google::protobuf::internal::kEmptyString) {
    scmapskill_ = new ::std::string;
  }
  scmapskill_->assign(value);
}
inline void SHeroSkin::set_scmapskill(const char* value, size_t size) {
  set_has_scmapskill();
  if (scmapskill_ == &::google::protobuf::internal::kEmptyString) {
    scmapskill_ = new ::std::string;
  }
  scmapskill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_scmapskill() {
  set_has_scmapskill();
  if (scmapskill_ == &::google::protobuf::internal::kEmptyString) {
    scmapskill_ = new ::std::string;
  }
  return scmapskill_;
}
inline ::std::string* SHeroSkin::release_scmapskill() {
  clear_has_scmapskill();
  if (scmapskill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scmapskill_;
    scmapskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sSmapSkill = 5;
inline bool SHeroSkin::has_ssmapskill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SHeroSkin::set_has_ssmapskill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SHeroSkin::clear_has_ssmapskill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SHeroSkin::clear_ssmapskill() {
  if (ssmapskill_ != &::google::protobuf::internal::kEmptyString) {
    ssmapskill_->clear();
  }
  clear_has_ssmapskill();
}
inline const ::std::string& SHeroSkin::ssmapskill() const {
  return *ssmapskill_;
}
inline void SHeroSkin::set_ssmapskill(const ::std::string& value) {
  set_has_ssmapskill();
  if (ssmapskill_ == &::google::protobuf::internal::kEmptyString) {
    ssmapskill_ = new ::std::string;
  }
  ssmapskill_->assign(value);
}
inline void SHeroSkin::set_ssmapskill(const char* value) {
  set_has_ssmapskill();
  if (ssmapskill_ == &::google::protobuf::internal::kEmptyString) {
    ssmapskill_ = new ::std::string;
  }
  ssmapskill_->assign(value);
}
inline void SHeroSkin::set_ssmapskill(const char* value, size_t size) {
  set_has_ssmapskill();
  if (ssmapskill_ == &::google::protobuf::internal::kEmptyString) {
    ssmapskill_ = new ::std::string;
  }
  ssmapskill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_ssmapskill() {
  set_has_ssmapskill();
  if (ssmapskill_ == &::google::protobuf::internal::kEmptyString) {
    ssmapskill_ = new ::std::string;
  }
  return ssmapskill_;
}
inline ::std::string* SHeroSkin::release_ssmapskill() {
  clear_has_ssmapskill();
  if (ssmapskill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ssmapskill_;
    ssmapskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sMapOtherAppearance = 6;
inline bool SHeroSkin::has_smapotherappearance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SHeroSkin::set_has_smapotherappearance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SHeroSkin::clear_has_smapotherappearance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SHeroSkin::clear_smapotherappearance() {
  if (smapotherappearance_ != &::google::protobuf::internal::kEmptyString) {
    smapotherappearance_->clear();
  }
  clear_has_smapotherappearance();
}
inline const ::std::string& SHeroSkin::smapotherappearance() const {
  return *smapotherappearance_;
}
inline void SHeroSkin::set_smapotherappearance(const ::std::string& value) {
  set_has_smapotherappearance();
  if (smapotherappearance_ == &::google::protobuf::internal::kEmptyString) {
    smapotherappearance_ = new ::std::string;
  }
  smapotherappearance_->assign(value);
}
inline void SHeroSkin::set_smapotherappearance(const char* value) {
  set_has_smapotherappearance();
  if (smapotherappearance_ == &::google::protobuf::internal::kEmptyString) {
    smapotherappearance_ = new ::std::string;
  }
  smapotherappearance_->assign(value);
}
inline void SHeroSkin::set_smapotherappearance(const char* value, size_t size) {
  set_has_smapotherappearance();
  if (smapotherappearance_ == &::google::protobuf::internal::kEmptyString) {
    smapotherappearance_ = new ::std::string;
  }
  smapotherappearance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_smapotherappearance() {
  set_has_smapotherappearance();
  if (smapotherappearance_ == &::google::protobuf::internal::kEmptyString) {
    smapotherappearance_ = new ::std::string;
  }
  return smapotherappearance_;
}
inline ::std::string* SHeroSkin::release_smapotherappearance() {
  clear_has_smapotherappearance();
  if (smapotherappearance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = smapotherappearance_;
    smapotherappearance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sSmapOther = 7;
inline bool SHeroSkin::has_ssmapother() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SHeroSkin::set_has_ssmapother() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SHeroSkin::clear_has_ssmapother() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SHeroSkin::clear_ssmapother() {
  if (ssmapother_ != &::google::protobuf::internal::kEmptyString) {
    ssmapother_->clear();
  }
  clear_has_ssmapother();
}
inline const ::std::string& SHeroSkin::ssmapother() const {
  return *ssmapother_;
}
inline void SHeroSkin::set_ssmapother(const ::std::string& value) {
  set_has_ssmapother();
  if (ssmapother_ == &::google::protobuf::internal::kEmptyString) {
    ssmapother_ = new ::std::string;
  }
  ssmapother_->assign(value);
}
inline void SHeroSkin::set_ssmapother(const char* value) {
  set_has_ssmapother();
  if (ssmapother_ == &::google::protobuf::internal::kEmptyString) {
    ssmapother_ = new ::std::string;
  }
  ssmapother_->assign(value);
}
inline void SHeroSkin::set_ssmapother(const char* value, size_t size) {
  set_has_ssmapother();
  if (ssmapother_ == &::google::protobuf::internal::kEmptyString) {
    ssmapother_ = new ::std::string;
  }
  ssmapother_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_ssmapother() {
  set_has_ssmapother();
  if (ssmapother_ == &::google::protobuf::internal::kEmptyString) {
    ssmapother_ = new ::std::string;
  }
  return ssmapother_;
}
inline ::std::string* SHeroSkin::release_ssmapother() {
  clear_has_ssmapother();
  if (ssmapother_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ssmapother_;
    ssmapother_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sBeginXY = 8;
inline bool SHeroSkin::has_sbeginxy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SHeroSkin::set_has_sbeginxy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SHeroSkin::clear_has_sbeginxy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SHeroSkin::clear_sbeginxy() {
  if (sbeginxy_ != &::google::protobuf::internal::kEmptyString) {
    sbeginxy_->clear();
  }
  clear_has_sbeginxy();
}
inline const ::std::string& SHeroSkin::sbeginxy() const {
  return *sbeginxy_;
}
inline void SHeroSkin::set_sbeginxy(const ::std::string& value) {
  set_has_sbeginxy();
  if (sbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sbeginxy_ = new ::std::string;
  }
  sbeginxy_->assign(value);
}
inline void SHeroSkin::set_sbeginxy(const char* value) {
  set_has_sbeginxy();
  if (sbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sbeginxy_ = new ::std::string;
  }
  sbeginxy_->assign(value);
}
inline void SHeroSkin::set_sbeginxy(const char* value, size_t size) {
  set_has_sbeginxy();
  if (sbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sbeginxy_ = new ::std::string;
  }
  sbeginxy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sbeginxy() {
  set_has_sbeginxy();
  if (sbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sbeginxy_ = new ::std::string;
  }
  return sbeginxy_;
}
inline ::std::string* SHeroSkin::release_sbeginxy() {
  clear_has_sbeginxy();
  if (sbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sbeginxy_;
    sbeginxy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sHeadBeginXY = 9;
inline bool SHeroSkin::has_sheadbeginxy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SHeroSkin::set_has_sheadbeginxy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SHeroSkin::clear_has_sheadbeginxy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SHeroSkin::clear_sheadbeginxy() {
  if (sheadbeginxy_ != &::google::protobuf::internal::kEmptyString) {
    sheadbeginxy_->clear();
  }
  clear_has_sheadbeginxy();
}
inline const ::std::string& SHeroSkin::sheadbeginxy() const {
  return *sheadbeginxy_;
}
inline void SHeroSkin::set_sheadbeginxy(const ::std::string& value) {
  set_has_sheadbeginxy();
  if (sheadbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sheadbeginxy_ = new ::std::string;
  }
  sheadbeginxy_->assign(value);
}
inline void SHeroSkin::set_sheadbeginxy(const char* value) {
  set_has_sheadbeginxy();
  if (sheadbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sheadbeginxy_ = new ::std::string;
  }
  sheadbeginxy_->assign(value);
}
inline void SHeroSkin::set_sheadbeginxy(const char* value, size_t size) {
  set_has_sheadbeginxy();
  if (sheadbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sheadbeginxy_ = new ::std::string;
  }
  sheadbeginxy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sheadbeginxy() {
  set_has_sheadbeginxy();
  if (sheadbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    sheadbeginxy_ = new ::std::string;
  }
  return sheadbeginxy_;
}
inline ::std::string* SHeroSkin::release_sheadbeginxy() {
  clear_has_sheadbeginxy();
  if (sheadbeginxy_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sheadbeginxy_;
    sheadbeginxy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sbIsChangeVoice = 10;
inline bool SHeroSkin::has_sbischangevoice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SHeroSkin::set_has_sbischangevoice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SHeroSkin::clear_has_sbischangevoice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SHeroSkin::clear_sbischangevoice() {
  if (sbischangevoice_ != &::google::protobuf::internal::kEmptyString) {
    sbischangevoice_->clear();
  }
  clear_has_sbischangevoice();
}
inline const ::std::string& SHeroSkin::sbischangevoice() const {
  return *sbischangevoice_;
}
inline void SHeroSkin::set_sbischangevoice(const ::std::string& value) {
  set_has_sbischangevoice();
  if (sbischangevoice_ == &::google::protobuf::internal::kEmptyString) {
    sbischangevoice_ = new ::std::string;
  }
  sbischangevoice_->assign(value);
}
inline void SHeroSkin::set_sbischangevoice(const char* value) {
  set_has_sbischangevoice();
  if (sbischangevoice_ == &::google::protobuf::internal::kEmptyString) {
    sbischangevoice_ = new ::std::string;
  }
  sbischangevoice_->assign(value);
}
inline void SHeroSkin::set_sbischangevoice(const char* value, size_t size) {
  set_has_sbischangevoice();
  if (sbischangevoice_ == &::google::protobuf::internal::kEmptyString) {
    sbischangevoice_ = new ::std::string;
  }
  sbischangevoice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sbischangevoice() {
  set_has_sbischangevoice();
  if (sbischangevoice_ == &::google::protobuf::internal::kEmptyString) {
    sbischangevoice_ = new ::std::string;
  }
  return sbischangevoice_;
}
inline ::std::string* SHeroSkin::release_sbischangevoice() {
  clear_has_sbischangevoice();
  if (sbischangevoice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sbischangevoice_;
    sbischangevoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sChagenSkillId = 11;
inline bool SHeroSkin::has_schagenskillid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SHeroSkin::set_has_schagenskillid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SHeroSkin::clear_has_schagenskillid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SHeroSkin::clear_schagenskillid() {
  if (schagenskillid_ != &::google::protobuf::internal::kEmptyString) {
    schagenskillid_->clear();
  }
  clear_has_schagenskillid();
}
inline const ::std::string& SHeroSkin::schagenskillid() const {
  return *schagenskillid_;
}
inline void SHeroSkin::set_schagenskillid(const ::std::string& value) {
  set_has_schagenskillid();
  if (schagenskillid_ == &::google::protobuf::internal::kEmptyString) {
    schagenskillid_ = new ::std::string;
  }
  schagenskillid_->assign(value);
}
inline void SHeroSkin::set_schagenskillid(const char* value) {
  set_has_schagenskillid();
  if (schagenskillid_ == &::google::protobuf::internal::kEmptyString) {
    schagenskillid_ = new ::std::string;
  }
  schagenskillid_->assign(value);
}
inline void SHeroSkin::set_schagenskillid(const char* value, size_t size) {
  set_has_schagenskillid();
  if (schagenskillid_ == &::google::protobuf::internal::kEmptyString) {
    schagenskillid_ = new ::std::string;
  }
  schagenskillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_schagenskillid() {
  set_has_schagenskillid();
  if (schagenskillid_ == &::google::protobuf::internal::kEmptyString) {
    schagenskillid_ = new ::std::string;
  }
  return schagenskillid_;
}
inline ::std::string* SHeroSkin::release_schagenskillid() {
  clear_has_schagenskillid();
  if (schagenskillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schagenskillid_;
    schagenskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 nSkinLevel = 12;
inline bool SHeroSkin::has_nskinlevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SHeroSkin::set_has_nskinlevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SHeroSkin::clear_has_nskinlevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SHeroSkin::clear_nskinlevel() {
  nskinlevel_ = 0u;
  clear_has_nskinlevel();
}
inline ::google::protobuf::uint32 SHeroSkin::nskinlevel() const {
  return nskinlevel_;
}
inline void SHeroSkin::set_nskinlevel(::google::protobuf::uint32 value) {
  set_has_nskinlevel();
  nskinlevel_ = value;
}

// optional string sChangebulletEffectId = 13;
inline bool SHeroSkin::has_schangebulleteffectid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SHeroSkin::set_has_schangebulleteffectid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SHeroSkin::clear_has_schangebulleteffectid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SHeroSkin::clear_schangebulleteffectid() {
  if (schangebulleteffectid_ != &::google::protobuf::internal::kEmptyString) {
    schangebulleteffectid_->clear();
  }
  clear_has_schangebulleteffectid();
}
inline const ::std::string& SHeroSkin::schangebulleteffectid() const {
  return *schangebulleteffectid_;
}
inline void SHeroSkin::set_schangebulleteffectid(const ::std::string& value) {
  set_has_schangebulleteffectid();
  if (schangebulleteffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangebulleteffectid_ = new ::std::string;
  }
  schangebulleteffectid_->assign(value);
}
inline void SHeroSkin::set_schangebulleteffectid(const char* value) {
  set_has_schangebulleteffectid();
  if (schangebulleteffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangebulleteffectid_ = new ::std::string;
  }
  schangebulleteffectid_->assign(value);
}
inline void SHeroSkin::set_schangebulleteffectid(const char* value, size_t size) {
  set_has_schangebulleteffectid();
  if (schangebulleteffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangebulleteffectid_ = new ::std::string;
  }
  schangebulleteffectid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_schangebulleteffectid() {
  set_has_schangebulleteffectid();
  if (schangebulleteffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangebulleteffectid_ = new ::std::string;
  }
  return schangebulleteffectid_;
}
inline ::std::string* SHeroSkin::release_schangebulleteffectid() {
  clear_has_schangebulleteffectid();
  if (schangebulleteffectid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schangebulleteffectid_;
    schangebulleteffectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sChangeStatusEffectId = 14;
inline bool SHeroSkin::has_schangestatuseffectid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SHeroSkin::set_has_schangestatuseffectid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SHeroSkin::clear_has_schangestatuseffectid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SHeroSkin::clear_schangestatuseffectid() {
  if (schangestatuseffectid_ != &::google::protobuf::internal::kEmptyString) {
    schangestatuseffectid_->clear();
  }
  clear_has_schangestatuseffectid();
}
inline const ::std::string& SHeroSkin::schangestatuseffectid() const {
  return *schangestatuseffectid_;
}
inline void SHeroSkin::set_schangestatuseffectid(const ::std::string& value) {
  set_has_schangestatuseffectid();
  if (schangestatuseffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangestatuseffectid_ = new ::std::string;
  }
  schangestatuseffectid_->assign(value);
}
inline void SHeroSkin::set_schangestatuseffectid(const char* value) {
  set_has_schangestatuseffectid();
  if (schangestatuseffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangestatuseffectid_ = new ::std::string;
  }
  schangestatuseffectid_->assign(value);
}
inline void SHeroSkin::set_schangestatuseffectid(const char* value, size_t size) {
  set_has_schangestatuseffectid();
  if (schangestatuseffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangestatuseffectid_ = new ::std::string;
  }
  schangestatuseffectid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_schangestatuseffectid() {
  set_has_schangestatuseffectid();
  if (schangestatuseffectid_ == &::google::protobuf::internal::kEmptyString) {
    schangestatuseffectid_ = new ::std::string;
  }
  return schangestatuseffectid_;
}
inline ::std::string* SHeroSkin::release_schangestatuseffectid() {
  clear_has_schangestatuseffectid();
  if (schangestatuseffectid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schangestatuseffectid_;
    schangestatuseffectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sChangeVoiceEffect = 15;
inline bool SHeroSkin::has_schangevoiceeffect() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SHeroSkin::set_has_schangevoiceeffect() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SHeroSkin::clear_has_schangevoiceeffect() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SHeroSkin::clear_schangevoiceeffect() {
  if (schangevoiceeffect_ != &::google::protobuf::internal::kEmptyString) {
    schangevoiceeffect_->clear();
  }
  clear_has_schangevoiceeffect();
}
inline const ::std::string& SHeroSkin::schangevoiceeffect() const {
  return *schangevoiceeffect_;
}
inline void SHeroSkin::set_schangevoiceeffect(const ::std::string& value) {
  set_has_schangevoiceeffect();
  if (schangevoiceeffect_ == &::google::protobuf::internal::kEmptyString) {
    schangevoiceeffect_ = new ::std::string;
  }
  schangevoiceeffect_->assign(value);
}
inline void SHeroSkin::set_schangevoiceeffect(const char* value) {
  set_has_schangevoiceeffect();
  if (schangevoiceeffect_ == &::google::protobuf::internal::kEmptyString) {
    schangevoiceeffect_ = new ::std::string;
  }
  schangevoiceeffect_->assign(value);
}
inline void SHeroSkin::set_schangevoiceeffect(const char* value, size_t size) {
  set_has_schangevoiceeffect();
  if (schangevoiceeffect_ == &::google::protobuf::internal::kEmptyString) {
    schangevoiceeffect_ = new ::std::string;
  }
  schangevoiceeffect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_schangevoiceeffect() {
  set_has_schangevoiceeffect();
  if (schangevoiceeffect_ == &::google::protobuf::internal::kEmptyString) {
    schangevoiceeffect_ = new ::std::string;
  }
  return schangevoiceeffect_;
}
inline ::std::string* SHeroSkin::release_schangevoiceeffect() {
  clear_has_schangevoiceeffect();
  if (schangevoiceeffect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = schangevoiceeffect_;
    schangevoiceeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sSkinwideAndHight = 16;
inline bool SHeroSkin::has_sskinwideandhight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SHeroSkin::set_has_sskinwideandhight() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SHeroSkin::clear_has_sskinwideandhight() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SHeroSkin::clear_sskinwideandhight() {
  if (sskinwideandhight_ != &::google::protobuf::internal::kEmptyString) {
    sskinwideandhight_->clear();
  }
  clear_has_sskinwideandhight();
}
inline const ::std::string& SHeroSkin::sskinwideandhight() const {
  return *sskinwideandhight_;
}
inline void SHeroSkin::set_sskinwideandhight(const ::std::string& value) {
  set_has_sskinwideandhight();
  if (sskinwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sskinwideandhight_ = new ::std::string;
  }
  sskinwideandhight_->assign(value);
}
inline void SHeroSkin::set_sskinwideandhight(const char* value) {
  set_has_sskinwideandhight();
  if (sskinwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sskinwideandhight_ = new ::std::string;
  }
  sskinwideandhight_->assign(value);
}
inline void SHeroSkin::set_sskinwideandhight(const char* value, size_t size) {
  set_has_sskinwideandhight();
  if (sskinwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sskinwideandhight_ = new ::std::string;
  }
  sskinwideandhight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sskinwideandhight() {
  set_has_sskinwideandhight();
  if (sskinwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sskinwideandhight_ = new ::std::string;
  }
  return sskinwideandhight_;
}
inline ::std::string* SHeroSkin::release_sskinwideandhight() {
  clear_has_sskinwideandhight();
  if (sskinwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sskinwideandhight_;
    sskinwideandhight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sHeadwideAndHight = 17;
inline bool SHeroSkin::has_sheadwideandhight() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SHeroSkin::set_has_sheadwideandhight() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SHeroSkin::clear_has_sheadwideandhight() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SHeroSkin::clear_sheadwideandhight() {
  if (sheadwideandhight_ != &::google::protobuf::internal::kEmptyString) {
    sheadwideandhight_->clear();
  }
  clear_has_sheadwideandhight();
}
inline const ::std::string& SHeroSkin::sheadwideandhight() const {
  return *sheadwideandhight_;
}
inline void SHeroSkin::set_sheadwideandhight(const ::std::string& value) {
  set_has_sheadwideandhight();
  if (sheadwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sheadwideandhight_ = new ::std::string;
  }
  sheadwideandhight_->assign(value);
}
inline void SHeroSkin::set_sheadwideandhight(const char* value) {
  set_has_sheadwideandhight();
  if (sheadwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sheadwideandhight_ = new ::std::string;
  }
  sheadwideandhight_->assign(value);
}
inline void SHeroSkin::set_sheadwideandhight(const char* value, size_t size) {
  set_has_sheadwideandhight();
  if (sheadwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sheadwideandhight_ = new ::std::string;
  }
  sheadwideandhight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sheadwideandhight() {
  set_has_sheadwideandhight();
  if (sheadwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    sheadwideandhight_ = new ::std::string;
  }
  return sheadwideandhight_;
}
inline ::std::string* SHeroSkin::release_sheadwideandhight() {
  clear_has_sheadwideandhight();
  if (sheadwideandhight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sheadwideandhight_;
    sheadwideandhight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sbackgroundBeginWideHight = 18;
inline bool SHeroSkin::has_sbackgroundbeginwidehight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SHeroSkin::set_has_sbackgroundbeginwidehight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SHeroSkin::clear_has_sbackgroundbeginwidehight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SHeroSkin::clear_sbackgroundbeginwidehight() {
  if (sbackgroundbeginwidehight_ != &::google::protobuf::internal::kEmptyString) {
    sbackgroundbeginwidehight_->clear();
  }
  clear_has_sbackgroundbeginwidehight();
}
inline const ::std::string& SHeroSkin::sbackgroundbeginwidehight() const {
  return *sbackgroundbeginwidehight_;
}
inline void SHeroSkin::set_sbackgroundbeginwidehight(const ::std::string& value) {
  set_has_sbackgroundbeginwidehight();
  if (sbackgroundbeginwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundbeginwidehight_ = new ::std::string;
  }
  sbackgroundbeginwidehight_->assign(value);
}
inline void SHeroSkin::set_sbackgroundbeginwidehight(const char* value) {
  set_has_sbackgroundbeginwidehight();
  if (sbackgroundbeginwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundbeginwidehight_ = new ::std::string;
  }
  sbackgroundbeginwidehight_->assign(value);
}
inline void SHeroSkin::set_sbackgroundbeginwidehight(const char* value, size_t size) {
  set_has_sbackgroundbeginwidehight();
  if (sbackgroundbeginwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundbeginwidehight_ = new ::std::string;
  }
  sbackgroundbeginwidehight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sbackgroundbeginwidehight() {
  set_has_sbackgroundbeginwidehight();
  if (sbackgroundbeginwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundbeginwidehight_ = new ::std::string;
  }
  return sbackgroundbeginwidehight_;
}
inline ::std::string* SHeroSkin::release_sbackgroundbeginwidehight() {
  clear_has_sbackgroundbeginwidehight();
  if (sbackgroundbeginwidehight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sbackgroundbeginwidehight_;
    sbackgroundbeginwidehight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sbackgroundendWideHight = 19;
inline bool SHeroSkin::has_sbackgroundendwidehight() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SHeroSkin::set_has_sbackgroundendwidehight() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SHeroSkin::clear_has_sbackgroundendwidehight() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SHeroSkin::clear_sbackgroundendwidehight() {
  if (sbackgroundendwidehight_ != &::google::protobuf::internal::kEmptyString) {
    sbackgroundendwidehight_->clear();
  }
  clear_has_sbackgroundendwidehight();
}
inline const ::std::string& SHeroSkin::sbackgroundendwidehight() const {
  return *sbackgroundendwidehight_;
}
inline void SHeroSkin::set_sbackgroundendwidehight(const ::std::string& value) {
  set_has_sbackgroundendwidehight();
  if (sbackgroundendwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundendwidehight_ = new ::std::string;
  }
  sbackgroundendwidehight_->assign(value);
}
inline void SHeroSkin::set_sbackgroundendwidehight(const char* value) {
  set_has_sbackgroundendwidehight();
  if (sbackgroundendwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundendwidehight_ = new ::std::string;
  }
  sbackgroundendwidehight_->assign(value);
}
inline void SHeroSkin::set_sbackgroundendwidehight(const char* value, size_t size) {
  set_has_sbackgroundendwidehight();
  if (sbackgroundendwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundendwidehight_ = new ::std::string;
  }
  sbackgroundendwidehight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHeroSkin::mutable_sbackgroundendwidehight() {
  set_has_sbackgroundendwidehight();
  if (sbackgroundendwidehight_ == &::google::protobuf::internal::kEmptyString) {
    sbackgroundendwidehight_ = new ::std::string;
  }
  return sbackgroundendwidehight_;
}
inline ::std::string* SHeroSkin::release_sbackgroundendwidehight() {
  clear_has_sbackgroundendwidehight();
  if (sbackgroundendwidehight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sbackgroundendwidehight_;
    sbackgroundendwidehight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uModelScale = 20;
inline bool SHeroSkin::has_umodelscale() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SHeroSkin::set_has_umodelscale() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SHeroSkin::clear_has_umodelscale() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SHeroSkin::clear_umodelscale() {
  umodelscale_ = 0u;
  clear_has_umodelscale();
}
inline ::google::protobuf::uint32 SHeroSkin::umodelscale() const {
  return umodelscale_;
}
inline void SHeroSkin::set_umodelscale(::google::protobuf::uint32 value) {
  set_has_umodelscale();
  umodelscale_ = value;
}

// optional uint32 uIsChangeIcon = 21;
inline bool SHeroSkin::has_uischangeicon() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SHeroSkin::set_has_uischangeicon() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SHeroSkin::clear_has_uischangeicon() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SHeroSkin::clear_uischangeicon() {
  uischangeicon_ = 0u;
  clear_has_uischangeicon();
}
inline ::google::protobuf::uint32 SHeroSkin::uischangeicon() const {
  return uischangeicon_;
}
inline void SHeroSkin::set_uischangeicon(::google::protobuf::uint32 value) {
  set_has_uischangeicon();
  uischangeicon_ = value;
}

// -------------------------------------------------------------------

// SHeroSkinDataPool

// repeated .SHeroSkin data = 1;
inline int SHeroSkinDataPool::data_size() const {
  return data_.size();
}
inline void SHeroSkinDataPool::clear_data() {
  data_.Clear();
}
inline const ::SHeroSkin& SHeroSkinDataPool::data(int index) const {
  return data_.Get(index);
}
inline ::SHeroSkin* SHeroSkinDataPool::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SHeroSkin* SHeroSkinDataPool::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SHeroSkin >&
SHeroSkinDataPool::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SHeroSkin >*
SHeroSkinDataPool::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Hero_2eproto__INCLUDED
