// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Item.proto

#ifndef PROTOBUF_Item_2eproto__INCLUDED
#define PROTOBUF_Item_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Item_2eproto();
void protobuf_AssignDesc_Item_2eproto();
void protobuf_ShutdownFile_Item_2eproto();

class SItem_Item;
class SItem_ItemDataPool;

// ===================================================================

class SItem_Item : public ::google::protobuf::Message {
 public:
  SItem_Item();
  virtual ~SItem_Item();
  
  SItem_Item(const SItem_Item& from);
  
  inline SItem_Item& operator=(const SItem_Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SItem_Item& default_instance();
  
  void Swap(SItem_Item* other);
  
  // implements Message ----------------------------------------------
  
  SItem_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SItem_Item& from);
  void MergeFrom(const SItem_Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 nID = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIDFieldNumber = 1;
  inline ::google::protobuf::uint32 nid() const;
  inline void set_nid(::google::protobuf::uint32 value);
  
  // optional int32 nUseTime = 2;
  inline bool has_nusetime() const;
  inline void clear_nusetime();
  static const int kNUseTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nusetime() const;
  inline void set_nusetime(::google::protobuf::int32 value);
  
  // optional int32 nCanDrop = 3;
  inline bool has_ncandrop() const;
  inline void clear_ncandrop();
  static const int kNCanDropFieldNumber = 3;
  inline ::google::protobuf::int32 ncandrop() const;
  inline void set_ncandrop(::google::protobuf::int32 value);
  
  // optional int32 nBill = 4;
  inline bool has_nbill() const;
  inline void clear_nbill();
  static const int kNBillFieldNumber = 4;
  inline ::google::protobuf::int32 nbill() const;
  inline void set_nbill(::google::protobuf::int32 value);
  
  // optional int32 nMedals = 5;
  inline bool has_nmedals() const;
  inline void clear_nmedals();
  static const int kNMedalsFieldNumber = 5;
  inline ::google::protobuf::int32 nmedals() const;
  inline void set_nmedals(::google::protobuf::int32 value);
  
  // optional int32 nValueType = 6;
  inline bool has_nvaluetype() const;
  inline void clear_nvaluetype();
  static const int kNValueTypeFieldNumber = 6;
  inline ::google::protobuf::int32 nvaluetype() const;
  inline void set_nvaluetype(::google::protobuf::int32 value);
  
  // optional int32 nValue = 7;
  inline bool has_nvalue() const;
  inline void clear_nvalue();
  static const int kNValueFieldNumber = 7;
  inline ::google::protobuf::int32 nvalue() const;
  inline void set_nvalue(::google::protobuf::int32 value);
  
  // optional int32 nReserveMoneyFlag = 8;
  inline bool has_nreservemoneyflag() const;
  inline void clear_nreservemoneyflag();
  static const int kNReserveMoneyFlagFieldNumber = 8;
  inline ::google::protobuf::int32 nreservemoneyflag() const;
  inline void set_nreservemoneyflag(::google::protobuf::int32 value);
  
  // optional int32 nQuality = 9;
  inline bool has_nquality() const;
  inline void clear_nquality();
  static const int kNQualityFieldNumber = 9;
  inline ::google::protobuf::int32 nquality() const;
  inline void set_nquality(::google::protobuf::int32 value);
  
  // optional bytes strItemType = 10;
  inline bool has_stritemtype() const;
  inline void clear_stritemtype();
  static const int kStrItemTypeFieldNumber = 10;
  inline const ::std::string& stritemtype() const;
  inline void set_stritemtype(const ::std::string& value);
  inline void set_stritemtype(const char* value);
  inline void set_stritemtype(const void* value, size_t size);
  inline ::std::string* mutable_stritemtype();
  inline ::std::string* release_stritemtype();
  
  // optional int32 nUseSingTime = 11;
  inline bool has_nusesingtime() const;
  inline void clear_nusesingtime();
  static const int kNUseSingTimeFieldNumber = 11;
  inline ::google::protobuf::int32 nusesingtime() const;
  inline void set_nusesingtime(::google::protobuf::int32 value);
  
  // optional int32 nUserTarget = 12;
  inline bool has_nusertarget() const;
  inline void clear_nusertarget();
  static const int kNUserTargetFieldNumber = 12;
  inline ::google::protobuf::int32 nusertarget() const;
  inline void set_nusertarget(::google::protobuf::int32 value);
  
  // optional int32 nCanMoved = 13;
  inline bool has_ncanmoved() const;
  inline void clear_ncanmoved();
  static const int kNCanMovedFieldNumber = 13;
  inline ::google::protobuf::int32 ncanmoved() const;
  inline void set_ncanmoved(::google::protobuf::int32 value);
  
  // optional int32 nCanDeleted = 14;
  inline bool has_ncandeleted() const;
  inline void clear_ncandeleted();
  static const int kNCanDeletedFieldNumber = 14;
  inline ::google::protobuf::int32 ncandeleted() const;
  inline void set_ncandeleted(::google::protobuf::int32 value);
  
  // optional int32 nCanTrade = 15;
  inline bool has_ncantrade() const;
  inline void clear_ncantrade();
  static const int kNCanTradeFieldNumber = 15;
  inline ::google::protobuf::int32 ncantrade() const;
  inline void set_ncantrade(::google::protobuf::int32 value);
  
  // optional int32 nCanSold = 16;
  inline bool has_ncansold() const;
  inline void clear_ncansold();
  static const int kNCanSoldFieldNumber = 16;
  inline ::google::protobuf::int32 ncansold() const;
  inline void set_ncansold(::google::protobuf::int32 value);
  
  // optional int32 nCanStored = 17;
  inline bool has_ncanstored() const;
  inline void clear_ncanstored();
  static const int kNCanStoredFieldNumber = 17;
  inline ::google::protobuf::int32 ncanstored() const;
  inline void set_ncanstored(::google::protobuf::int32 value);
  
  // optional int32 nCanBound = 18;
  inline bool has_ncanbound() const;
  inline void clear_ncanbound();
  static const int kNCanBoundFieldNumber = 18;
  inline ::google::protobuf::int32 ncanbound() const;
  inline void set_ncanbound(::google::protobuf::int32 value);
  
  // optional int32 nIsExclusive = 19;
  inline bool has_nisexclusive() const;
  inline void clear_nisexclusive();
  static const int kNIsExclusiveFieldNumber = 19;
  inline ::google::protobuf::int32 nisexclusive() const;
  inline void set_nisexclusive(::google::protobuf::int32 value);
  
  // optional int32 nIsExpendable = 20;
  inline bool has_nisexpendable() const;
  inline void clear_nisexpendable();
  static const int kNIsExpendableFieldNumber = 20;
  inline ::google::protobuf::int32 nisexpendable() const;
  inline void set_nisexpendable(::google::protobuf::int32 value);
  
  // optional int32 nColdDownType = 21;
  inline bool has_ncolddowntype() const;
  inline void clear_ncolddowntype();
  static const int kNColdDownTypeFieldNumber = 21;
  inline ::google::protobuf::int32 ncolddowntype() const;
  inline void set_ncolddowntype(::google::protobuf::int32 value);
  
  // optional int32 nColdDownTime = 22;
  inline bool has_ncolddowntime() const;
  inline void clear_ncolddowntime();
  static const int kNColdDownTimeFieldNumber = 22;
  inline ::google::protobuf::int32 ncolddowntime() const;
  inline void set_ncolddowntime(::google::protobuf::int32 value);
  
  // optional bytes strItemName = 23;
  inline bool has_stritemname() const;
  inline void clear_stritemname();
  static const int kStrItemNameFieldNumber = 23;
  inline const ::std::string& stritemname() const;
  inline void set_stritemname(const ::std::string& value);
  inline void set_stritemname(const char* value);
  inline void set_stritemname(const void* value, size_t size);
  inline ::std::string* mutable_stritemname();
  inline ::std::string* release_stritemname();
  
  // optional bytes strDescription = 24;
  inline bool has_strdescription() const;
  inline void clear_strdescription();
  static const int kStrDescriptionFieldNumber = 24;
  inline const ::std::string& strdescription() const;
  inline void set_strdescription(const ::std::string& value);
  inline void set_strdescription(const char* value);
  inline void set_strdescription(const void* value, size_t size);
  inline ::std::string* mutable_strdescription();
  inline ::std::string* release_strdescription();
  
  // optional int32 nItemLevel = 25;
  inline bool has_nitemlevel() const;
  inline void clear_nitemlevel();
  static const int kNItemLevelFieldNumber = 25;
  inline ::google::protobuf::int32 nitemlevel() const;
  inline void set_nitemlevel(::google::protobuf::int32 value);
  
  // optional bytes strIconFile = 26;
  inline bool has_striconfile() const;
  inline void clear_striconfile();
  static const int kStrIconFileFieldNumber = 26;
  inline const ::std::string& striconfile() const;
  inline void set_striconfile(const ::std::string& value);
  inline void set_striconfile(const char* value);
  inline void set_striconfile(const void* value, size_t size);
  inline ::std::string* mutable_striconfile();
  inline ::std::string* release_striconfile();
  
  // optional bytes strUsingItemSound = 27;
  inline bool has_strusingitemsound() const;
  inline void clear_strusingitemsound();
  static const int kStrUsingItemSoundFieldNumber = 27;
  inline const ::std::string& strusingitemsound() const;
  inline void set_strusingitemsound(const ::std::string& value);
  inline void set_strusingitemsound(const char* value);
  inline void set_strusingitemsound(const void* value, size_t size);
  inline ::std::string* mutable_strusingitemsound();
  inline ::std::string* release_strusingitemsound();
  
  // optional int32 nDropItemModel = 28;
  inline bool has_ndropitemmodel() const;
  inline void clear_ndropitemmodel();
  static const int kNDropItemModelFieldNumber = 28;
  inline ::google::protobuf::int32 ndropitemmodel() const;
  inline void set_ndropitemmodel(::google::protobuf::int32 value);
  
  // optional bytes strRare = 29;
  inline bool has_strrare() const;
  inline void clear_strrare();
  static const int kStrRareFieldNumber = 29;
  inline const ::std::string& strrare() const;
  inline void set_strrare(const ::std::string& value);
  inline void set_strrare(const char* value);
  inline void set_strrare(const void* value, size_t size);
  inline ::std::string* mutable_strrare();
  inline ::std::string* release_strrare();
  
  // optional int32 nIfShowEqipEffect = 30;
  inline bool has_nifshoweqipeffect() const;
  inline void clear_nifshoweqipeffect();
  static const int kNIfShowEqipEffectFieldNumber = 30;
  inline ::google::protobuf::int32 nifshoweqipeffect() const;
  inline void set_nifshoweqipeffect(::google::protobuf::int32 value);
  
  // optional int32 nCanLocked = 31;
  inline bool has_ncanlocked() const;
  inline void clear_ncanlocked();
  static const int kNCanLockedFieldNumber = 31;
  inline ::google::protobuf::int32 ncanlocked() const;
  inline void set_ncanlocked(::google::protobuf::int32 value);
  
  // optional bytes strCastEffectPath = 32;
  inline bool has_strcasteffectpath() const;
  inline void clear_strcasteffectpath();
  static const int kStrCastEffectPathFieldNumber = 32;
  inline const ::std::string& strcasteffectpath() const;
  inline void set_strcasteffectpath(const ::std::string& value);
  inline void set_strcasteffectpath(const char* value);
  inline void set_strcasteffectpath(const void* value, size_t size);
  inline ::std::string* mutable_strcasteffectpath();
  inline ::std::string* release_strcasteffectpath();
  
  // optional bytes strFireEffectPath = 33;
  inline bool has_strfireeffectpath() const;
  inline void clear_strfireeffectpath();
  static const int kStrFireEffectPathFieldNumber = 33;
  inline const ::std::string& strfireeffectpath() const;
  inline void set_strfireeffectpath(const ::std::string& value);
  inline void set_strfireeffectpath(const char* value);
  inline void set_strfireeffectpath(const void* value, size_t size);
  inline ::std::string* mutable_strfireeffectpath();
  inline ::std::string* release_strfireeffectpath();
  
  // optional bytes strHitEffectPath = 34;
  inline bool has_strhiteffectpath() const;
  inline void clear_strhiteffectpath();
  static const int kStrHitEffectPathFieldNumber = 34;
  inline const ::std::string& strhiteffectpath() const;
  inline void set_strhiteffectpath(const ::std::string& value);
  inline void set_strhiteffectpath(const char* value);
  inline void set_strhiteffectpath(const void* value, size_t size);
  inline ::std::string* mutable_strhiteffectpath();
  inline ::std::string* release_strhiteffectpath();
  
  // optional int32 nIconID = 35;
  inline bool has_niconid() const;
  inline void clear_niconid();
  static const int kNIconIDFieldNumber = 35;
  inline ::google::protobuf::int32 niconid() const;
  inline void set_niconid(::google::protobuf::int32 value);
  
  // optional int32 nCanSplit = 36;
  inline bool has_ncansplit() const;
  inline void clear_ncansplit();
  static const int kNCanSplitFieldNumber = 36;
  inline ::google::protobuf::int32 ncansplit() const;
  inline void set_ncansplit(::google::protobuf::int32 value);
  
  // optional int32 nprocessTime = 37;
  inline bool has_nprocesstime() const;
  inline void clear_nprocesstime();
  static const int kNprocessTimeFieldNumber = 37;
  inline ::google::protobuf::int32 nprocesstime() const;
  inline void set_nprocesstime(::google::protobuf::int32 value);
  
  // optional bytes strModelPath = 38;
  inline bool has_strmodelpath() const;
  inline void clear_strmodelpath();
  static const int kStrModelPathFieldNumber = 38;
  inline const ::std::string& strmodelpath() const;
  inline void set_strmodelpath(const ::std::string& value);
  inline void set_strmodelpath(const char* value);
  inline void set_strmodelpath(const void* value, size_t size);
  inline ::std::string* mutable_strmodelpath();
  inline ::std::string* release_strmodelpath();
  
  // optional int32 nCanDrag = 39;
  inline bool has_ncandrag() const;
  inline void clear_ncandrag();
  static const int kNCanDragFieldNumber = 39;
  inline ::google::protobuf::int32 ncandrag() const;
  inline void set_ncandrag(::google::protobuf::int32 value);
  
  // optional bytes strDisableMapID = 40;
  inline bool has_strdisablemapid() const;
  inline void clear_strdisablemapid();
  static const int kStrDisableMapIDFieldNumber = 40;
  inline const ::std::string& strdisablemapid() const;
  inline void set_strdisablemapid(const ::std::string& value);
  inline void set_strdisablemapid(const char* value);
  inline void set_strdisablemapid(const void* value, size_t size);
  inline ::std::string* mutable_strdisablemapid();
  inline ::std::string* release_strdisablemapid();
  
  // optional int32 nIsRaise = 41;
  inline bool has_nisraise() const;
  inline void clear_nisraise();
  static const int kNIsRaiseFieldNumber = 41;
  inline ::google::protobuf::int32 nisraise() const;
  inline void set_nisraise(::google::protobuf::int32 value);
  
  // optional bytes strSedSkillID = 42;
  inline bool has_strsedskillid() const;
  inline void clear_strsedskillid();
  static const int kStrSedSkillIDFieldNumber = 42;
  inline const ::std::string& strsedskillid() const;
  inline void set_strsedskillid(const ::std::string& value);
  inline void set_strsedskillid(const char* value);
  inline void set_strsedskillid(const void* value, size_t size);
  inline ::std::string* mutable_strsedskillid();
  inline ::std::string* release_strsedskillid();
  
  // optional int32 nAlchemyType = 43;
  inline bool has_nalchemytype() const;
  inline void clear_nalchemytype();
  static const int kNAlchemyTypeFieldNumber = 43;
  inline ::google::protobuf::int32 nalchemytype() const;
  inline void set_nalchemytype(::google::protobuf::int32 value);
  
  // optional int32 nUseType = 44;
  inline bool has_nusetype() const;
  inline void clear_nusetype();
  static const int kNUseTypeFieldNumber = 44;
  inline ::google::protobuf::int32 nusetype() const;
  inline void set_nusetype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SItem_Item)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_nusetime();
  inline void clear_has_nusetime();
  inline void set_has_ncandrop();
  inline void clear_has_ncandrop();
  inline void set_has_nbill();
  inline void clear_has_nbill();
  inline void set_has_nmedals();
  inline void clear_has_nmedals();
  inline void set_has_nvaluetype();
  inline void clear_has_nvaluetype();
  inline void set_has_nvalue();
  inline void clear_has_nvalue();
  inline void set_has_nreservemoneyflag();
  inline void clear_has_nreservemoneyflag();
  inline void set_has_nquality();
  inline void clear_has_nquality();
  inline void set_has_stritemtype();
  inline void clear_has_stritemtype();
  inline void set_has_nusesingtime();
  inline void clear_has_nusesingtime();
  inline void set_has_nusertarget();
  inline void clear_has_nusertarget();
  inline void set_has_ncanmoved();
  inline void clear_has_ncanmoved();
  inline void set_has_ncandeleted();
  inline void clear_has_ncandeleted();
  inline void set_has_ncantrade();
  inline void clear_has_ncantrade();
  inline void set_has_ncansold();
  inline void clear_has_ncansold();
  inline void set_has_ncanstored();
  inline void clear_has_ncanstored();
  inline void set_has_ncanbound();
  inline void clear_has_ncanbound();
  inline void set_has_nisexclusive();
  inline void clear_has_nisexclusive();
  inline void set_has_nisexpendable();
  inline void clear_has_nisexpendable();
  inline void set_has_ncolddowntype();
  inline void clear_has_ncolddowntype();
  inline void set_has_ncolddowntime();
  inline void clear_has_ncolddowntime();
  inline void set_has_stritemname();
  inline void clear_has_stritemname();
  inline void set_has_strdescription();
  inline void clear_has_strdescription();
  inline void set_has_nitemlevel();
  inline void clear_has_nitemlevel();
  inline void set_has_striconfile();
  inline void clear_has_striconfile();
  inline void set_has_strusingitemsound();
  inline void clear_has_strusingitemsound();
  inline void set_has_ndropitemmodel();
  inline void clear_has_ndropitemmodel();
  inline void set_has_strrare();
  inline void clear_has_strrare();
  inline void set_has_nifshoweqipeffect();
  inline void clear_has_nifshoweqipeffect();
  inline void set_has_ncanlocked();
  inline void clear_has_ncanlocked();
  inline void set_has_strcasteffectpath();
  inline void clear_has_strcasteffectpath();
  inline void set_has_strfireeffectpath();
  inline void clear_has_strfireeffectpath();
  inline void set_has_strhiteffectpath();
  inline void clear_has_strhiteffectpath();
  inline void set_has_niconid();
  inline void clear_has_niconid();
  inline void set_has_ncansplit();
  inline void clear_has_ncansplit();
  inline void set_has_nprocesstime();
  inline void clear_has_nprocesstime();
  inline void set_has_strmodelpath();
  inline void clear_has_strmodelpath();
  inline void set_has_ncandrag();
  inline void clear_has_ncandrag();
  inline void set_has_strdisablemapid();
  inline void clear_has_strdisablemapid();
  inline void set_has_nisraise();
  inline void clear_has_nisraise();
  inline void set_has_strsedskillid();
  inline void clear_has_strsedskillid();
  inline void set_has_nalchemytype();
  inline void clear_has_nalchemytype();
  inline void set_has_nusetype();
  inline void clear_has_nusetype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 nid_;
  ::google::protobuf::int32 nusetime_;
  ::google::protobuf::int32 ncandrop_;
  ::google::protobuf::int32 nbill_;
  ::google::protobuf::int32 nmedals_;
  ::google::protobuf::int32 nvaluetype_;
  ::google::protobuf::int32 nvalue_;
  ::google::protobuf::int32 nreservemoneyflag_;
  ::std::string* stritemtype_;
  ::google::protobuf::int32 nquality_;
  ::google::protobuf::int32 nusesingtime_;
  ::google::protobuf::int32 nusertarget_;
  ::google::protobuf::int32 ncanmoved_;
  ::google::protobuf::int32 ncandeleted_;
  ::google::protobuf::int32 ncantrade_;
  ::google::protobuf::int32 ncansold_;
  ::google::protobuf::int32 ncanstored_;
  ::google::protobuf::int32 ncanbound_;
  ::google::protobuf::int32 nisexclusive_;
  ::google::protobuf::int32 nisexpendable_;
  ::google::protobuf::int32 ncolddowntype_;
  ::std::string* stritemname_;
  ::google::protobuf::int32 ncolddowntime_;
  ::google::protobuf::int32 nitemlevel_;
  ::std::string* strdescription_;
  ::std::string* striconfile_;
  ::std::string* strusingitemsound_;
  ::google::protobuf::int32 ndropitemmodel_;
  ::google::protobuf::int32 nifshoweqipeffect_;
  ::std::string* strrare_;
  ::std::string* strcasteffectpath_;
  ::std::string* strfireeffectpath_;
  ::google::protobuf::int32 ncanlocked_;
  ::google::protobuf::int32 niconid_;
  ::std::string* strhiteffectpath_;
  ::google::protobuf::int32 ncansplit_;
  ::google::protobuf::int32 nprocesstime_;
  ::std::string* strmodelpath_;
  ::std::string* strdisablemapid_;
  ::google::protobuf::int32 ncandrag_;
  ::google::protobuf::int32 nisraise_;
  ::std::string* strsedskillid_;
  ::google::protobuf::int32 nalchemytype_;
  ::google::protobuf::int32 nusetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(44 + 31) / 32];
  
  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();
  
  void InitAsDefaultInstance();
  static SItem_Item* default_instance_;
};
// -------------------------------------------------------------------

class SItem_ItemDataPool : public ::google::protobuf::Message {
 public:
  SItem_ItemDataPool();
  virtual ~SItem_ItemDataPool();
  
  SItem_ItemDataPool(const SItem_ItemDataPool& from);
  
  inline SItem_ItemDataPool& operator=(const SItem_ItemDataPool& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SItem_ItemDataPool& default_instance();
  
  void Swap(SItem_ItemDataPool* other);
  
  // implements Message ----------------------------------------------
  
  SItem_ItemDataPool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SItem_ItemDataPool& from);
  void MergeFrom(const SItem_ItemDataPool& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SItem_Item data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::SItem_Item& data(int index) const;
  inline ::SItem_Item* mutable_data(int index);
  inline ::SItem_Item* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SItem_Item >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SItem_Item >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:SItem_ItemDataPool)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SItem_Item > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Item_2eproto();
  friend void protobuf_AssignDesc_Item_2eproto();
  friend void protobuf_ShutdownFile_Item_2eproto();
  
  void InitAsDefaultInstance();
  static SItem_ItemDataPool* default_instance_;
};
// ===================================================================


// ===================================================================

// SItem_Item

// optional uint32 nID = 1;
inline bool SItem_Item::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SItem_Item::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SItem_Item::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SItem_Item::clear_nid() {
  nid_ = 0u;
  clear_has_nid();
}
inline ::google::protobuf::uint32 SItem_Item::nid() const {
  return nid_;
}
inline void SItem_Item::set_nid(::google::protobuf::uint32 value) {
  set_has_nid();
  nid_ = value;
}

// optional int32 nUseTime = 2;
inline bool SItem_Item::has_nusetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SItem_Item::set_has_nusetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SItem_Item::clear_has_nusetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SItem_Item::clear_nusetime() {
  nusetime_ = 0;
  clear_has_nusetime();
}
inline ::google::protobuf::int32 SItem_Item::nusetime() const {
  return nusetime_;
}
inline void SItem_Item::set_nusetime(::google::protobuf::int32 value) {
  set_has_nusetime();
  nusetime_ = value;
}

// optional int32 nCanDrop = 3;
inline bool SItem_Item::has_ncandrop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SItem_Item::set_has_ncandrop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SItem_Item::clear_has_ncandrop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SItem_Item::clear_ncandrop() {
  ncandrop_ = 0;
  clear_has_ncandrop();
}
inline ::google::protobuf::int32 SItem_Item::ncandrop() const {
  return ncandrop_;
}
inline void SItem_Item::set_ncandrop(::google::protobuf::int32 value) {
  set_has_ncandrop();
  ncandrop_ = value;
}

// optional int32 nBill = 4;
inline bool SItem_Item::has_nbill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SItem_Item::set_has_nbill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SItem_Item::clear_has_nbill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SItem_Item::clear_nbill() {
  nbill_ = 0;
  clear_has_nbill();
}
inline ::google::protobuf::int32 SItem_Item::nbill() const {
  return nbill_;
}
inline void SItem_Item::set_nbill(::google::protobuf::int32 value) {
  set_has_nbill();
  nbill_ = value;
}

// optional int32 nMedals = 5;
inline bool SItem_Item::has_nmedals() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SItem_Item::set_has_nmedals() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SItem_Item::clear_has_nmedals() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SItem_Item::clear_nmedals() {
  nmedals_ = 0;
  clear_has_nmedals();
}
inline ::google::protobuf::int32 SItem_Item::nmedals() const {
  return nmedals_;
}
inline void SItem_Item::set_nmedals(::google::protobuf::int32 value) {
  set_has_nmedals();
  nmedals_ = value;
}

// optional int32 nValueType = 6;
inline bool SItem_Item::has_nvaluetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SItem_Item::set_has_nvaluetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SItem_Item::clear_has_nvaluetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SItem_Item::clear_nvaluetype() {
  nvaluetype_ = 0;
  clear_has_nvaluetype();
}
inline ::google::protobuf::int32 SItem_Item::nvaluetype() const {
  return nvaluetype_;
}
inline void SItem_Item::set_nvaluetype(::google::protobuf::int32 value) {
  set_has_nvaluetype();
  nvaluetype_ = value;
}

// optional int32 nValue = 7;
inline bool SItem_Item::has_nvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SItem_Item::set_has_nvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SItem_Item::clear_has_nvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SItem_Item::clear_nvalue() {
  nvalue_ = 0;
  clear_has_nvalue();
}
inline ::google::protobuf::int32 SItem_Item::nvalue() const {
  return nvalue_;
}
inline void SItem_Item::set_nvalue(::google::protobuf::int32 value) {
  set_has_nvalue();
  nvalue_ = value;
}

// optional int32 nReserveMoneyFlag = 8;
inline bool SItem_Item::has_nreservemoneyflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SItem_Item::set_has_nreservemoneyflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SItem_Item::clear_has_nreservemoneyflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SItem_Item::clear_nreservemoneyflag() {
  nreservemoneyflag_ = 0;
  clear_has_nreservemoneyflag();
}
inline ::google::protobuf::int32 SItem_Item::nreservemoneyflag() const {
  return nreservemoneyflag_;
}
inline void SItem_Item::set_nreservemoneyflag(::google::protobuf::int32 value) {
  set_has_nreservemoneyflag();
  nreservemoneyflag_ = value;
}

// optional int32 nQuality = 9;
inline bool SItem_Item::has_nquality() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SItem_Item::set_has_nquality() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SItem_Item::clear_has_nquality() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SItem_Item::clear_nquality() {
  nquality_ = 0;
  clear_has_nquality();
}
inline ::google::protobuf::int32 SItem_Item::nquality() const {
  return nquality_;
}
inline void SItem_Item::set_nquality(::google::protobuf::int32 value) {
  set_has_nquality();
  nquality_ = value;
}

// optional bytes strItemType = 10;
inline bool SItem_Item::has_stritemtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SItem_Item::set_has_stritemtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SItem_Item::clear_has_stritemtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SItem_Item::clear_stritemtype() {
  if (stritemtype_ != &::google::protobuf::internal::kEmptyString) {
    stritemtype_->clear();
  }
  clear_has_stritemtype();
}
inline const ::std::string& SItem_Item::stritemtype() const {
  return *stritemtype_;
}
inline void SItem_Item::set_stritemtype(const ::std::string& value) {
  set_has_stritemtype();
  if (stritemtype_ == &::google::protobuf::internal::kEmptyString) {
    stritemtype_ = new ::std::string;
  }
  stritemtype_->assign(value);
}
inline void SItem_Item::set_stritemtype(const char* value) {
  set_has_stritemtype();
  if (stritemtype_ == &::google::protobuf::internal::kEmptyString) {
    stritemtype_ = new ::std::string;
  }
  stritemtype_->assign(value);
}
inline void SItem_Item::set_stritemtype(const void* value, size_t size) {
  set_has_stritemtype();
  if (stritemtype_ == &::google::protobuf::internal::kEmptyString) {
    stritemtype_ = new ::std::string;
  }
  stritemtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_stritemtype() {
  set_has_stritemtype();
  if (stritemtype_ == &::google::protobuf::internal::kEmptyString) {
    stritemtype_ = new ::std::string;
  }
  return stritemtype_;
}
inline ::std::string* SItem_Item::release_stritemtype() {
  clear_has_stritemtype();
  if (stritemtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stritemtype_;
    stritemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nUseSingTime = 11;
inline bool SItem_Item::has_nusesingtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SItem_Item::set_has_nusesingtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SItem_Item::clear_has_nusesingtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SItem_Item::clear_nusesingtime() {
  nusesingtime_ = 0;
  clear_has_nusesingtime();
}
inline ::google::protobuf::int32 SItem_Item::nusesingtime() const {
  return nusesingtime_;
}
inline void SItem_Item::set_nusesingtime(::google::protobuf::int32 value) {
  set_has_nusesingtime();
  nusesingtime_ = value;
}

// optional int32 nUserTarget = 12;
inline bool SItem_Item::has_nusertarget() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SItem_Item::set_has_nusertarget() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SItem_Item::clear_has_nusertarget() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SItem_Item::clear_nusertarget() {
  nusertarget_ = 0;
  clear_has_nusertarget();
}
inline ::google::protobuf::int32 SItem_Item::nusertarget() const {
  return nusertarget_;
}
inline void SItem_Item::set_nusertarget(::google::protobuf::int32 value) {
  set_has_nusertarget();
  nusertarget_ = value;
}

// optional int32 nCanMoved = 13;
inline bool SItem_Item::has_ncanmoved() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SItem_Item::set_has_ncanmoved() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SItem_Item::clear_has_ncanmoved() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SItem_Item::clear_ncanmoved() {
  ncanmoved_ = 0;
  clear_has_ncanmoved();
}
inline ::google::protobuf::int32 SItem_Item::ncanmoved() const {
  return ncanmoved_;
}
inline void SItem_Item::set_ncanmoved(::google::protobuf::int32 value) {
  set_has_ncanmoved();
  ncanmoved_ = value;
}

// optional int32 nCanDeleted = 14;
inline bool SItem_Item::has_ncandeleted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SItem_Item::set_has_ncandeleted() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SItem_Item::clear_has_ncandeleted() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SItem_Item::clear_ncandeleted() {
  ncandeleted_ = 0;
  clear_has_ncandeleted();
}
inline ::google::protobuf::int32 SItem_Item::ncandeleted() const {
  return ncandeleted_;
}
inline void SItem_Item::set_ncandeleted(::google::protobuf::int32 value) {
  set_has_ncandeleted();
  ncandeleted_ = value;
}

// optional int32 nCanTrade = 15;
inline bool SItem_Item::has_ncantrade() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SItem_Item::set_has_ncantrade() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SItem_Item::clear_has_ncantrade() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SItem_Item::clear_ncantrade() {
  ncantrade_ = 0;
  clear_has_ncantrade();
}
inline ::google::protobuf::int32 SItem_Item::ncantrade() const {
  return ncantrade_;
}
inline void SItem_Item::set_ncantrade(::google::protobuf::int32 value) {
  set_has_ncantrade();
  ncantrade_ = value;
}

// optional int32 nCanSold = 16;
inline bool SItem_Item::has_ncansold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SItem_Item::set_has_ncansold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SItem_Item::clear_has_ncansold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SItem_Item::clear_ncansold() {
  ncansold_ = 0;
  clear_has_ncansold();
}
inline ::google::protobuf::int32 SItem_Item::ncansold() const {
  return ncansold_;
}
inline void SItem_Item::set_ncansold(::google::protobuf::int32 value) {
  set_has_ncansold();
  ncansold_ = value;
}

// optional int32 nCanStored = 17;
inline bool SItem_Item::has_ncanstored() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SItem_Item::set_has_ncanstored() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SItem_Item::clear_has_ncanstored() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SItem_Item::clear_ncanstored() {
  ncanstored_ = 0;
  clear_has_ncanstored();
}
inline ::google::protobuf::int32 SItem_Item::ncanstored() const {
  return ncanstored_;
}
inline void SItem_Item::set_ncanstored(::google::protobuf::int32 value) {
  set_has_ncanstored();
  ncanstored_ = value;
}

// optional int32 nCanBound = 18;
inline bool SItem_Item::has_ncanbound() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SItem_Item::set_has_ncanbound() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SItem_Item::clear_has_ncanbound() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SItem_Item::clear_ncanbound() {
  ncanbound_ = 0;
  clear_has_ncanbound();
}
inline ::google::protobuf::int32 SItem_Item::ncanbound() const {
  return ncanbound_;
}
inline void SItem_Item::set_ncanbound(::google::protobuf::int32 value) {
  set_has_ncanbound();
  ncanbound_ = value;
}

// optional int32 nIsExclusive = 19;
inline bool SItem_Item::has_nisexclusive() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SItem_Item::set_has_nisexclusive() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SItem_Item::clear_has_nisexclusive() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SItem_Item::clear_nisexclusive() {
  nisexclusive_ = 0;
  clear_has_nisexclusive();
}
inline ::google::protobuf::int32 SItem_Item::nisexclusive() const {
  return nisexclusive_;
}
inline void SItem_Item::set_nisexclusive(::google::protobuf::int32 value) {
  set_has_nisexclusive();
  nisexclusive_ = value;
}

// optional int32 nIsExpendable = 20;
inline bool SItem_Item::has_nisexpendable() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SItem_Item::set_has_nisexpendable() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SItem_Item::clear_has_nisexpendable() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SItem_Item::clear_nisexpendable() {
  nisexpendable_ = 0;
  clear_has_nisexpendable();
}
inline ::google::protobuf::int32 SItem_Item::nisexpendable() const {
  return nisexpendable_;
}
inline void SItem_Item::set_nisexpendable(::google::protobuf::int32 value) {
  set_has_nisexpendable();
  nisexpendable_ = value;
}

// optional int32 nColdDownType = 21;
inline bool SItem_Item::has_ncolddowntype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SItem_Item::set_has_ncolddowntype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SItem_Item::clear_has_ncolddowntype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SItem_Item::clear_ncolddowntype() {
  ncolddowntype_ = 0;
  clear_has_ncolddowntype();
}
inline ::google::protobuf::int32 SItem_Item::ncolddowntype() const {
  return ncolddowntype_;
}
inline void SItem_Item::set_ncolddowntype(::google::protobuf::int32 value) {
  set_has_ncolddowntype();
  ncolddowntype_ = value;
}

// optional int32 nColdDownTime = 22;
inline bool SItem_Item::has_ncolddowntime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SItem_Item::set_has_ncolddowntime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SItem_Item::clear_has_ncolddowntime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SItem_Item::clear_ncolddowntime() {
  ncolddowntime_ = 0;
  clear_has_ncolddowntime();
}
inline ::google::protobuf::int32 SItem_Item::ncolddowntime() const {
  return ncolddowntime_;
}
inline void SItem_Item::set_ncolddowntime(::google::protobuf::int32 value) {
  set_has_ncolddowntime();
  ncolddowntime_ = value;
}

// optional bytes strItemName = 23;
inline bool SItem_Item::has_stritemname() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SItem_Item::set_has_stritemname() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SItem_Item::clear_has_stritemname() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SItem_Item::clear_stritemname() {
  if (stritemname_ != &::google::protobuf::internal::kEmptyString) {
    stritemname_->clear();
  }
  clear_has_stritemname();
}
inline const ::std::string& SItem_Item::stritemname() const {
  return *stritemname_;
}
inline void SItem_Item::set_stritemname(const ::std::string& value) {
  set_has_stritemname();
  if (stritemname_ == &::google::protobuf::internal::kEmptyString) {
    stritemname_ = new ::std::string;
  }
  stritemname_->assign(value);
}
inline void SItem_Item::set_stritemname(const char* value) {
  set_has_stritemname();
  if (stritemname_ == &::google::protobuf::internal::kEmptyString) {
    stritemname_ = new ::std::string;
  }
  stritemname_->assign(value);
}
inline void SItem_Item::set_stritemname(const void* value, size_t size) {
  set_has_stritemname();
  if (stritemname_ == &::google::protobuf::internal::kEmptyString) {
    stritemname_ = new ::std::string;
  }
  stritemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_stritemname() {
  set_has_stritemname();
  if (stritemname_ == &::google::protobuf::internal::kEmptyString) {
    stritemname_ = new ::std::string;
  }
  return stritemname_;
}
inline ::std::string* SItem_Item::release_stritemname() {
  clear_has_stritemname();
  if (stritemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stritemname_;
    stritemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes strDescription = 24;
inline bool SItem_Item::has_strdescription() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SItem_Item::set_has_strdescription() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SItem_Item::clear_has_strdescription() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SItem_Item::clear_strdescription() {
  if (strdescription_ != &::google::protobuf::internal::kEmptyString) {
    strdescription_->clear();
  }
  clear_has_strdescription();
}
inline const ::std::string& SItem_Item::strdescription() const {
  return *strdescription_;
}
inline void SItem_Item::set_strdescription(const ::std::string& value) {
  set_has_strdescription();
  if (strdescription_ == &::google::protobuf::internal::kEmptyString) {
    strdescription_ = new ::std::string;
  }
  strdescription_->assign(value);
}
inline void SItem_Item::set_strdescription(const char* value) {
  set_has_strdescription();
  if (strdescription_ == &::google::protobuf::internal::kEmptyString) {
    strdescription_ = new ::std::string;
  }
  strdescription_->assign(value);
}
inline void SItem_Item::set_strdescription(const void* value, size_t size) {
  set_has_strdescription();
  if (strdescription_ == &::google::protobuf::internal::kEmptyString) {
    strdescription_ = new ::std::string;
  }
  strdescription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strdescription() {
  set_has_strdescription();
  if (strdescription_ == &::google::protobuf::internal::kEmptyString) {
    strdescription_ = new ::std::string;
  }
  return strdescription_;
}
inline ::std::string* SItem_Item::release_strdescription() {
  clear_has_strdescription();
  if (strdescription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdescription_;
    strdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nItemLevel = 25;
inline bool SItem_Item::has_nitemlevel() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SItem_Item::set_has_nitemlevel() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SItem_Item::clear_has_nitemlevel() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SItem_Item::clear_nitemlevel() {
  nitemlevel_ = 0;
  clear_has_nitemlevel();
}
inline ::google::protobuf::int32 SItem_Item::nitemlevel() const {
  return nitemlevel_;
}
inline void SItem_Item::set_nitemlevel(::google::protobuf::int32 value) {
  set_has_nitemlevel();
  nitemlevel_ = value;
}

// optional bytes strIconFile = 26;
inline bool SItem_Item::has_striconfile() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SItem_Item::set_has_striconfile() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SItem_Item::clear_has_striconfile() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SItem_Item::clear_striconfile() {
  if (striconfile_ != &::google::protobuf::internal::kEmptyString) {
    striconfile_->clear();
  }
  clear_has_striconfile();
}
inline const ::std::string& SItem_Item::striconfile() const {
  return *striconfile_;
}
inline void SItem_Item::set_striconfile(const ::std::string& value) {
  set_has_striconfile();
  if (striconfile_ == &::google::protobuf::internal::kEmptyString) {
    striconfile_ = new ::std::string;
  }
  striconfile_->assign(value);
}
inline void SItem_Item::set_striconfile(const char* value) {
  set_has_striconfile();
  if (striconfile_ == &::google::protobuf::internal::kEmptyString) {
    striconfile_ = new ::std::string;
  }
  striconfile_->assign(value);
}
inline void SItem_Item::set_striconfile(const void* value, size_t size) {
  set_has_striconfile();
  if (striconfile_ == &::google::protobuf::internal::kEmptyString) {
    striconfile_ = new ::std::string;
  }
  striconfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_striconfile() {
  set_has_striconfile();
  if (striconfile_ == &::google::protobuf::internal::kEmptyString) {
    striconfile_ = new ::std::string;
  }
  return striconfile_;
}
inline ::std::string* SItem_Item::release_striconfile() {
  clear_has_striconfile();
  if (striconfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = striconfile_;
    striconfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes strUsingItemSound = 27;
inline bool SItem_Item::has_strusingitemsound() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SItem_Item::set_has_strusingitemsound() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SItem_Item::clear_has_strusingitemsound() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SItem_Item::clear_strusingitemsound() {
  if (strusingitemsound_ != &::google::protobuf::internal::kEmptyString) {
    strusingitemsound_->clear();
  }
  clear_has_strusingitemsound();
}
inline const ::std::string& SItem_Item::strusingitemsound() const {
  return *strusingitemsound_;
}
inline void SItem_Item::set_strusingitemsound(const ::std::string& value) {
  set_has_strusingitemsound();
  if (strusingitemsound_ == &::google::protobuf::internal::kEmptyString) {
    strusingitemsound_ = new ::std::string;
  }
  strusingitemsound_->assign(value);
}
inline void SItem_Item::set_strusingitemsound(const char* value) {
  set_has_strusingitemsound();
  if (strusingitemsound_ == &::google::protobuf::internal::kEmptyString) {
    strusingitemsound_ = new ::std::string;
  }
  strusingitemsound_->assign(value);
}
inline void SItem_Item::set_strusingitemsound(const void* value, size_t size) {
  set_has_strusingitemsound();
  if (strusingitemsound_ == &::google::protobuf::internal::kEmptyString) {
    strusingitemsound_ = new ::std::string;
  }
  strusingitemsound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strusingitemsound() {
  set_has_strusingitemsound();
  if (strusingitemsound_ == &::google::protobuf::internal::kEmptyString) {
    strusingitemsound_ = new ::std::string;
  }
  return strusingitemsound_;
}
inline ::std::string* SItem_Item::release_strusingitemsound() {
  clear_has_strusingitemsound();
  if (strusingitemsound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strusingitemsound_;
    strusingitemsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nDropItemModel = 28;
inline bool SItem_Item::has_ndropitemmodel() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SItem_Item::set_has_ndropitemmodel() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SItem_Item::clear_has_ndropitemmodel() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SItem_Item::clear_ndropitemmodel() {
  ndropitemmodel_ = 0;
  clear_has_ndropitemmodel();
}
inline ::google::protobuf::int32 SItem_Item::ndropitemmodel() const {
  return ndropitemmodel_;
}
inline void SItem_Item::set_ndropitemmodel(::google::protobuf::int32 value) {
  set_has_ndropitemmodel();
  ndropitemmodel_ = value;
}

// optional bytes strRare = 29;
inline bool SItem_Item::has_strrare() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SItem_Item::set_has_strrare() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SItem_Item::clear_has_strrare() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SItem_Item::clear_strrare() {
  if (strrare_ != &::google::protobuf::internal::kEmptyString) {
    strrare_->clear();
  }
  clear_has_strrare();
}
inline const ::std::string& SItem_Item::strrare() const {
  return *strrare_;
}
inline void SItem_Item::set_strrare(const ::std::string& value) {
  set_has_strrare();
  if (strrare_ == &::google::protobuf::internal::kEmptyString) {
    strrare_ = new ::std::string;
  }
  strrare_->assign(value);
}
inline void SItem_Item::set_strrare(const char* value) {
  set_has_strrare();
  if (strrare_ == &::google::protobuf::internal::kEmptyString) {
    strrare_ = new ::std::string;
  }
  strrare_->assign(value);
}
inline void SItem_Item::set_strrare(const void* value, size_t size) {
  set_has_strrare();
  if (strrare_ == &::google::protobuf::internal::kEmptyString) {
    strrare_ = new ::std::string;
  }
  strrare_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strrare() {
  set_has_strrare();
  if (strrare_ == &::google::protobuf::internal::kEmptyString) {
    strrare_ = new ::std::string;
  }
  return strrare_;
}
inline ::std::string* SItem_Item::release_strrare() {
  clear_has_strrare();
  if (strrare_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strrare_;
    strrare_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nIfShowEqipEffect = 30;
inline bool SItem_Item::has_nifshoweqipeffect() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SItem_Item::set_has_nifshoweqipeffect() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SItem_Item::clear_has_nifshoweqipeffect() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SItem_Item::clear_nifshoweqipeffect() {
  nifshoweqipeffect_ = 0;
  clear_has_nifshoweqipeffect();
}
inline ::google::protobuf::int32 SItem_Item::nifshoweqipeffect() const {
  return nifshoweqipeffect_;
}
inline void SItem_Item::set_nifshoweqipeffect(::google::protobuf::int32 value) {
  set_has_nifshoweqipeffect();
  nifshoweqipeffect_ = value;
}

// optional int32 nCanLocked = 31;
inline bool SItem_Item::has_ncanlocked() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SItem_Item::set_has_ncanlocked() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SItem_Item::clear_has_ncanlocked() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SItem_Item::clear_ncanlocked() {
  ncanlocked_ = 0;
  clear_has_ncanlocked();
}
inline ::google::protobuf::int32 SItem_Item::ncanlocked() const {
  return ncanlocked_;
}
inline void SItem_Item::set_ncanlocked(::google::protobuf::int32 value) {
  set_has_ncanlocked();
  ncanlocked_ = value;
}

// optional bytes strCastEffectPath = 32;
inline bool SItem_Item::has_strcasteffectpath() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SItem_Item::set_has_strcasteffectpath() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SItem_Item::clear_has_strcasteffectpath() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SItem_Item::clear_strcasteffectpath() {
  if (strcasteffectpath_ != &::google::protobuf::internal::kEmptyString) {
    strcasteffectpath_->clear();
  }
  clear_has_strcasteffectpath();
}
inline const ::std::string& SItem_Item::strcasteffectpath() const {
  return *strcasteffectpath_;
}
inline void SItem_Item::set_strcasteffectpath(const ::std::string& value) {
  set_has_strcasteffectpath();
  if (strcasteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strcasteffectpath_ = new ::std::string;
  }
  strcasteffectpath_->assign(value);
}
inline void SItem_Item::set_strcasteffectpath(const char* value) {
  set_has_strcasteffectpath();
  if (strcasteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strcasteffectpath_ = new ::std::string;
  }
  strcasteffectpath_->assign(value);
}
inline void SItem_Item::set_strcasteffectpath(const void* value, size_t size) {
  set_has_strcasteffectpath();
  if (strcasteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strcasteffectpath_ = new ::std::string;
  }
  strcasteffectpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strcasteffectpath() {
  set_has_strcasteffectpath();
  if (strcasteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strcasteffectpath_ = new ::std::string;
  }
  return strcasteffectpath_;
}
inline ::std::string* SItem_Item::release_strcasteffectpath() {
  clear_has_strcasteffectpath();
  if (strcasteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strcasteffectpath_;
    strcasteffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes strFireEffectPath = 33;
inline bool SItem_Item::has_strfireeffectpath() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SItem_Item::set_has_strfireeffectpath() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SItem_Item::clear_has_strfireeffectpath() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SItem_Item::clear_strfireeffectpath() {
  if (strfireeffectpath_ != &::google::protobuf::internal::kEmptyString) {
    strfireeffectpath_->clear();
  }
  clear_has_strfireeffectpath();
}
inline const ::std::string& SItem_Item::strfireeffectpath() const {
  return *strfireeffectpath_;
}
inline void SItem_Item::set_strfireeffectpath(const ::std::string& value) {
  set_has_strfireeffectpath();
  if (strfireeffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strfireeffectpath_ = new ::std::string;
  }
  strfireeffectpath_->assign(value);
}
inline void SItem_Item::set_strfireeffectpath(const char* value) {
  set_has_strfireeffectpath();
  if (strfireeffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strfireeffectpath_ = new ::std::string;
  }
  strfireeffectpath_->assign(value);
}
inline void SItem_Item::set_strfireeffectpath(const void* value, size_t size) {
  set_has_strfireeffectpath();
  if (strfireeffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strfireeffectpath_ = new ::std::string;
  }
  strfireeffectpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strfireeffectpath() {
  set_has_strfireeffectpath();
  if (strfireeffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strfireeffectpath_ = new ::std::string;
  }
  return strfireeffectpath_;
}
inline ::std::string* SItem_Item::release_strfireeffectpath() {
  clear_has_strfireeffectpath();
  if (strfireeffectpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strfireeffectpath_;
    strfireeffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes strHitEffectPath = 34;
inline bool SItem_Item::has_strhiteffectpath() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SItem_Item::set_has_strhiteffectpath() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SItem_Item::clear_has_strhiteffectpath() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SItem_Item::clear_strhiteffectpath() {
  if (strhiteffectpath_ != &::google::protobuf::internal::kEmptyString) {
    strhiteffectpath_->clear();
  }
  clear_has_strhiteffectpath();
}
inline const ::std::string& SItem_Item::strhiteffectpath() const {
  return *strhiteffectpath_;
}
inline void SItem_Item::set_strhiteffectpath(const ::std::string& value) {
  set_has_strhiteffectpath();
  if (strhiteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strhiteffectpath_ = new ::std::string;
  }
  strhiteffectpath_->assign(value);
}
inline void SItem_Item::set_strhiteffectpath(const char* value) {
  set_has_strhiteffectpath();
  if (strhiteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strhiteffectpath_ = new ::std::string;
  }
  strhiteffectpath_->assign(value);
}
inline void SItem_Item::set_strhiteffectpath(const void* value, size_t size) {
  set_has_strhiteffectpath();
  if (strhiteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strhiteffectpath_ = new ::std::string;
  }
  strhiteffectpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strhiteffectpath() {
  set_has_strhiteffectpath();
  if (strhiteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    strhiteffectpath_ = new ::std::string;
  }
  return strhiteffectpath_;
}
inline ::std::string* SItem_Item::release_strhiteffectpath() {
  clear_has_strhiteffectpath();
  if (strhiteffectpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strhiteffectpath_;
    strhiteffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nIconID = 35;
inline bool SItem_Item::has_niconid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SItem_Item::set_has_niconid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SItem_Item::clear_has_niconid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SItem_Item::clear_niconid() {
  niconid_ = 0;
  clear_has_niconid();
}
inline ::google::protobuf::int32 SItem_Item::niconid() const {
  return niconid_;
}
inline void SItem_Item::set_niconid(::google::protobuf::int32 value) {
  set_has_niconid();
  niconid_ = value;
}

// optional int32 nCanSplit = 36;
inline bool SItem_Item::has_ncansplit() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SItem_Item::set_has_ncansplit() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SItem_Item::clear_has_ncansplit() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SItem_Item::clear_ncansplit() {
  ncansplit_ = 0;
  clear_has_ncansplit();
}
inline ::google::protobuf::int32 SItem_Item::ncansplit() const {
  return ncansplit_;
}
inline void SItem_Item::set_ncansplit(::google::protobuf::int32 value) {
  set_has_ncansplit();
  ncansplit_ = value;
}

// optional int32 nprocessTime = 37;
inline bool SItem_Item::has_nprocesstime() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SItem_Item::set_has_nprocesstime() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SItem_Item::clear_has_nprocesstime() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SItem_Item::clear_nprocesstime() {
  nprocesstime_ = 0;
  clear_has_nprocesstime();
}
inline ::google::protobuf::int32 SItem_Item::nprocesstime() const {
  return nprocesstime_;
}
inline void SItem_Item::set_nprocesstime(::google::protobuf::int32 value) {
  set_has_nprocesstime();
  nprocesstime_ = value;
}

// optional bytes strModelPath = 38;
inline bool SItem_Item::has_strmodelpath() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SItem_Item::set_has_strmodelpath() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SItem_Item::clear_has_strmodelpath() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SItem_Item::clear_strmodelpath() {
  if (strmodelpath_ != &::google::protobuf::internal::kEmptyString) {
    strmodelpath_->clear();
  }
  clear_has_strmodelpath();
}
inline const ::std::string& SItem_Item::strmodelpath() const {
  return *strmodelpath_;
}
inline void SItem_Item::set_strmodelpath(const ::std::string& value) {
  set_has_strmodelpath();
  if (strmodelpath_ == &::google::protobuf::internal::kEmptyString) {
    strmodelpath_ = new ::std::string;
  }
  strmodelpath_->assign(value);
}
inline void SItem_Item::set_strmodelpath(const char* value) {
  set_has_strmodelpath();
  if (strmodelpath_ == &::google::protobuf::internal::kEmptyString) {
    strmodelpath_ = new ::std::string;
  }
  strmodelpath_->assign(value);
}
inline void SItem_Item::set_strmodelpath(const void* value, size_t size) {
  set_has_strmodelpath();
  if (strmodelpath_ == &::google::protobuf::internal::kEmptyString) {
    strmodelpath_ = new ::std::string;
  }
  strmodelpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strmodelpath() {
  set_has_strmodelpath();
  if (strmodelpath_ == &::google::protobuf::internal::kEmptyString) {
    strmodelpath_ = new ::std::string;
  }
  return strmodelpath_;
}
inline ::std::string* SItem_Item::release_strmodelpath() {
  clear_has_strmodelpath();
  if (strmodelpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strmodelpath_;
    strmodelpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nCanDrag = 39;
inline bool SItem_Item::has_ncandrag() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SItem_Item::set_has_ncandrag() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SItem_Item::clear_has_ncandrag() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SItem_Item::clear_ncandrag() {
  ncandrag_ = 0;
  clear_has_ncandrag();
}
inline ::google::protobuf::int32 SItem_Item::ncandrag() const {
  return ncandrag_;
}
inline void SItem_Item::set_ncandrag(::google::protobuf::int32 value) {
  set_has_ncandrag();
  ncandrag_ = value;
}

// optional bytes strDisableMapID = 40;
inline bool SItem_Item::has_strdisablemapid() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SItem_Item::set_has_strdisablemapid() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SItem_Item::clear_has_strdisablemapid() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SItem_Item::clear_strdisablemapid() {
  if (strdisablemapid_ != &::google::protobuf::internal::kEmptyString) {
    strdisablemapid_->clear();
  }
  clear_has_strdisablemapid();
}
inline const ::std::string& SItem_Item::strdisablemapid() const {
  return *strdisablemapid_;
}
inline void SItem_Item::set_strdisablemapid(const ::std::string& value) {
  set_has_strdisablemapid();
  if (strdisablemapid_ == &::google::protobuf::internal::kEmptyString) {
    strdisablemapid_ = new ::std::string;
  }
  strdisablemapid_->assign(value);
}
inline void SItem_Item::set_strdisablemapid(const char* value) {
  set_has_strdisablemapid();
  if (strdisablemapid_ == &::google::protobuf::internal::kEmptyString) {
    strdisablemapid_ = new ::std::string;
  }
  strdisablemapid_->assign(value);
}
inline void SItem_Item::set_strdisablemapid(const void* value, size_t size) {
  set_has_strdisablemapid();
  if (strdisablemapid_ == &::google::protobuf::internal::kEmptyString) {
    strdisablemapid_ = new ::std::string;
  }
  strdisablemapid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strdisablemapid() {
  set_has_strdisablemapid();
  if (strdisablemapid_ == &::google::protobuf::internal::kEmptyString) {
    strdisablemapid_ = new ::std::string;
  }
  return strdisablemapid_;
}
inline ::std::string* SItem_Item::release_strdisablemapid() {
  clear_has_strdisablemapid();
  if (strdisablemapid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdisablemapid_;
    strdisablemapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nIsRaise = 41;
inline bool SItem_Item::has_nisraise() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SItem_Item::set_has_nisraise() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SItem_Item::clear_has_nisraise() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SItem_Item::clear_nisraise() {
  nisraise_ = 0;
  clear_has_nisraise();
}
inline ::google::protobuf::int32 SItem_Item::nisraise() const {
  return nisraise_;
}
inline void SItem_Item::set_nisraise(::google::protobuf::int32 value) {
  set_has_nisraise();
  nisraise_ = value;
}

// optional bytes strSedSkillID = 42;
inline bool SItem_Item::has_strsedskillid() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SItem_Item::set_has_strsedskillid() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SItem_Item::clear_has_strsedskillid() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SItem_Item::clear_strsedskillid() {
  if (strsedskillid_ != &::google::protobuf::internal::kEmptyString) {
    strsedskillid_->clear();
  }
  clear_has_strsedskillid();
}
inline const ::std::string& SItem_Item::strsedskillid() const {
  return *strsedskillid_;
}
inline void SItem_Item::set_strsedskillid(const ::std::string& value) {
  set_has_strsedskillid();
  if (strsedskillid_ == &::google::protobuf::internal::kEmptyString) {
    strsedskillid_ = new ::std::string;
  }
  strsedskillid_->assign(value);
}
inline void SItem_Item::set_strsedskillid(const char* value) {
  set_has_strsedskillid();
  if (strsedskillid_ == &::google::protobuf::internal::kEmptyString) {
    strsedskillid_ = new ::std::string;
  }
  strsedskillid_->assign(value);
}
inline void SItem_Item::set_strsedskillid(const void* value, size_t size) {
  set_has_strsedskillid();
  if (strsedskillid_ == &::google::protobuf::internal::kEmptyString) {
    strsedskillid_ = new ::std::string;
  }
  strsedskillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SItem_Item::mutable_strsedskillid() {
  set_has_strsedskillid();
  if (strsedskillid_ == &::google::protobuf::internal::kEmptyString) {
    strsedskillid_ = new ::std::string;
  }
  return strsedskillid_;
}
inline ::std::string* SItem_Item::release_strsedskillid() {
  clear_has_strsedskillid();
  if (strsedskillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strsedskillid_;
    strsedskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 nAlchemyType = 43;
inline bool SItem_Item::has_nalchemytype() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SItem_Item::set_has_nalchemytype() {
  _has_bits_[1] |= 0x00000400u;
}
inline void SItem_Item::clear_has_nalchemytype() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void SItem_Item::clear_nalchemytype() {
  nalchemytype_ = 0;
  clear_has_nalchemytype();
}
inline ::google::protobuf::int32 SItem_Item::nalchemytype() const {
  return nalchemytype_;
}
inline void SItem_Item::set_nalchemytype(::google::protobuf::int32 value) {
  set_has_nalchemytype();
  nalchemytype_ = value;
}

// optional int32 nUseType = 44;
inline bool SItem_Item::has_nusetype() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SItem_Item::set_has_nusetype() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SItem_Item::clear_has_nusetype() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SItem_Item::clear_nusetype() {
  nusetype_ = 0;
  clear_has_nusetype();
}
inline ::google::protobuf::int32 SItem_Item::nusetype() const {
  return nusetype_;
}
inline void SItem_Item::set_nusetype(::google::protobuf::int32 value) {
  set_has_nusetype();
  nusetype_ = value;
}

// -------------------------------------------------------------------

// SItem_ItemDataPool

// repeated .SItem_Item data = 1;
inline int SItem_ItemDataPool::data_size() const {
  return data_.size();
}
inline void SItem_ItemDataPool::clear_data() {
  data_.Clear();
}
inline const ::SItem_Item& SItem_ItemDataPool::data(int index) const {
  return data_.Get(index);
}
inline ::SItem_Item* SItem_ItemDataPool::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SItem_Item* SItem_ItemDataPool::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SItem_Item >&
SItem_ItemDataPool::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SItem_Item >*
SItem_ItemDataPool::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Item_2eproto__INCLUDED
