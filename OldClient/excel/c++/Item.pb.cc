// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SItem_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItem_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* SItem_ItemDataPool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SItem_ItemDataPool_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Item_2eproto() {
  protobuf_AddDesc_Item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Item.proto");
  GOOGLE_CHECK(file != NULL);
  SItem_Item_descriptor_ = file->message_type(0);
  static const int SItem_Item_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nusetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncandrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nbill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nmedals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nreservemoneyflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, stritemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nusesingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nusertarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncanmoved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncandeleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncantrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncansold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncanstored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncanbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nisexclusive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nisexpendable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncolddowntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncolddowntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, stritemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strdescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nitemlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, striconfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strusingitemsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ndropitemmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strrare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nifshoweqipeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncanlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strcasteffectpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strfireeffectpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strhiteffectpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, niconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncansplit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nprocesstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strmodelpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, ncandrag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strdisablemapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nisraise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, strsedskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nalchemytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, nusetype_),
  };
  SItem_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItem_Item_descriptor_,
      SItem_Item::default_instance_,
      SItem_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItem_Item));
  SItem_ItemDataPool_descriptor_ = file->message_type(1);
  static const int SItem_ItemDataPool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_ItemDataPool, data_),
  };
  SItem_ItemDataPool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SItem_ItemDataPool_descriptor_,
      SItem_ItemDataPool::default_instance_,
      SItem_ItemDataPool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_ItemDataPool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SItem_ItemDataPool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SItem_ItemDataPool));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItem_Item_descriptor_, &SItem_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SItem_ItemDataPool_descriptor_, &SItem_ItemDataPool::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Item_2eproto() {
  delete SItem_Item::default_instance_;
  delete SItem_Item_reflection_;
  delete SItem_ItemDataPool::default_instance_;
  delete SItem_ItemDataPool_reflection_;
}

void protobuf_AddDesc_Item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nItem.proto\"\242\007\n\nSItem_Item\022\013\n\003nID\030\001 \001(\r"
    "\022\020\n\010nUseTime\030\002 \001(\005\022\020\n\010nCanDrop\030\003 \001(\005\022\r\n\005"
    "nBill\030\004 \001(\005\022\017\n\007nMedals\030\005 \001(\005\022\022\n\nnValueTy"
    "pe\030\006 \001(\005\022\016\n\006nValue\030\007 \001(\005\022\031\n\021nReserveMone"
    "yFlag\030\010 \001(\005\022\020\n\010nQuality\030\t \001(\005\022\023\n\013strItem"
    "Type\030\n \001(\014\022\024\n\014nUseSingTime\030\013 \001(\005\022\023\n\013nUse"
    "rTarget\030\014 \001(\005\022\021\n\tnCanMoved\030\r \001(\005\022\023\n\013nCan"
    "Deleted\030\016 \001(\005\022\021\n\tnCanTrade\030\017 \001(\005\022\020\n\010nCan"
    "Sold\030\020 \001(\005\022\022\n\nnCanStored\030\021 \001(\005\022\021\n\tnCanBo"
    "und\030\022 \001(\005\022\024\n\014nIsExclusive\030\023 \001(\005\022\025\n\rnIsEx"
    "pendable\030\024 \001(\005\022\025\n\rnColdDownType\030\025 \001(\005\022\025\n"
    "\rnColdDownTime\030\026 \001(\005\022\023\n\013strItemName\030\027 \001("
    "\014\022\026\n\016strDescription\030\030 \001(\014\022\022\n\nnItemLevel\030"
    "\031 \001(\005\022\023\n\013strIconFile\030\032 \001(\014\022\031\n\021strUsingIt"
    "emSound\030\033 \001(\014\022\026\n\016nDropItemModel\030\034 \001(\005\022\017\n"
    "\007strRare\030\035 \001(\014\022\031\n\021nIfShowEqipEffect\030\036 \001("
    "\005\022\022\n\nnCanLocked\030\037 \001(\005\022\031\n\021strCastEffectPa"
    "th\030  \001(\014\022\031\n\021strFireEffectPath\030! \001(\014\022\030\n\020s"
    "trHitEffectPath\030\" \001(\014\022\017\n\007nIconID\030# \001(\005\022\021"
    "\n\tnCanSplit\030$ \001(\005\022\024\n\014nprocessTime\030% \001(\005\022"
    "\024\n\014strModelPath\030& \001(\014\022\020\n\010nCanDrag\030\' \001(\005\022"
    "\027\n\017strDisableMapID\030( \001(\014\022\020\n\010nIsRaise\030) \001"
    "(\005\022\025\n\rstrSedSkillID\030* \001(\014\022\024\n\014nAlchemyTyp"
    "e\030+ \001(\005\022\020\n\010nUseType\030, \001(\005\"/\n\022SItem_ItemD"
    "ataPool\022\031\n\004data\030\001 \003(\0132\013.SItem_Item", 994);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Item.proto", &protobuf_RegisterTypes);
  SItem_Item::default_instance_ = new SItem_Item();
  SItem_ItemDataPool::default_instance_ = new SItem_ItemDataPool();
  SItem_Item::default_instance_->InitAsDefaultInstance();
  SItem_ItemDataPool::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Item_2eproto {
  StaticDescriptorInitializer_Item_2eproto() {
    protobuf_AddDesc_Item_2eproto();
  }
} static_descriptor_initializer_Item_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SItem_Item::kNIDFieldNumber;
const int SItem_Item::kNUseTimeFieldNumber;
const int SItem_Item::kNCanDropFieldNumber;
const int SItem_Item::kNBillFieldNumber;
const int SItem_Item::kNMedalsFieldNumber;
const int SItem_Item::kNValueTypeFieldNumber;
const int SItem_Item::kNValueFieldNumber;
const int SItem_Item::kNReserveMoneyFlagFieldNumber;
const int SItem_Item::kNQualityFieldNumber;
const int SItem_Item::kStrItemTypeFieldNumber;
const int SItem_Item::kNUseSingTimeFieldNumber;
const int SItem_Item::kNUserTargetFieldNumber;
const int SItem_Item::kNCanMovedFieldNumber;
const int SItem_Item::kNCanDeletedFieldNumber;
const int SItem_Item::kNCanTradeFieldNumber;
const int SItem_Item::kNCanSoldFieldNumber;
const int SItem_Item::kNCanStoredFieldNumber;
const int SItem_Item::kNCanBoundFieldNumber;
const int SItem_Item::kNIsExclusiveFieldNumber;
const int SItem_Item::kNIsExpendableFieldNumber;
const int SItem_Item::kNColdDownTypeFieldNumber;
const int SItem_Item::kNColdDownTimeFieldNumber;
const int SItem_Item::kStrItemNameFieldNumber;
const int SItem_Item::kStrDescriptionFieldNumber;
const int SItem_Item::kNItemLevelFieldNumber;
const int SItem_Item::kStrIconFileFieldNumber;
const int SItem_Item::kStrUsingItemSoundFieldNumber;
const int SItem_Item::kNDropItemModelFieldNumber;
const int SItem_Item::kStrRareFieldNumber;
const int SItem_Item::kNIfShowEqipEffectFieldNumber;
const int SItem_Item::kNCanLockedFieldNumber;
const int SItem_Item::kStrCastEffectPathFieldNumber;
const int SItem_Item::kStrFireEffectPathFieldNumber;
const int SItem_Item::kStrHitEffectPathFieldNumber;
const int SItem_Item::kNIconIDFieldNumber;
const int SItem_Item::kNCanSplitFieldNumber;
const int SItem_Item::kNprocessTimeFieldNumber;
const int SItem_Item::kStrModelPathFieldNumber;
const int SItem_Item::kNCanDragFieldNumber;
const int SItem_Item::kStrDisableMapIDFieldNumber;
const int SItem_Item::kNIsRaiseFieldNumber;
const int SItem_Item::kStrSedSkillIDFieldNumber;
const int SItem_Item::kNAlchemyTypeFieldNumber;
const int SItem_Item::kNUseTypeFieldNumber;
#endif  // !_MSC_VER

SItem_Item::SItem_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItem_Item::InitAsDefaultInstance() {
}

SItem_Item::SItem_Item(const SItem_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItem_Item::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  nusetime_ = 0;
  ncandrop_ = 0;
  nbill_ = 0;
  nmedals_ = 0;
  nvaluetype_ = 0;
  nvalue_ = 0;
  nreservemoneyflag_ = 0;
  nquality_ = 0;
  stritemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nusesingtime_ = 0;
  nusertarget_ = 0;
  ncanmoved_ = 0;
  ncandeleted_ = 0;
  ncantrade_ = 0;
  ncansold_ = 0;
  ncanstored_ = 0;
  ncanbound_ = 0;
  nisexclusive_ = 0;
  nisexpendable_ = 0;
  ncolddowntype_ = 0;
  ncolddowntime_ = 0;
  stritemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nitemlevel_ = 0;
  striconfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strusingitemsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ndropitemmodel_ = 0;
  strrare_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nifshoweqipeffect_ = 0;
  ncanlocked_ = 0;
  strcasteffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strfireeffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strhiteffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  niconid_ = 0;
  ncansplit_ = 0;
  nprocesstime_ = 0;
  strmodelpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ncandrag_ = 0;
  strdisablemapid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nisraise_ = 0;
  strsedskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nalchemytype_ = 0;
  nusetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItem_Item::~SItem_Item() {
  SharedDtor();
}

void SItem_Item::SharedDtor() {
  if (stritemtype_ != &::google::protobuf::internal::kEmptyString) {
    delete stritemtype_;
  }
  if (stritemname_ != &::google::protobuf::internal::kEmptyString) {
    delete stritemname_;
  }
  if (strdescription_ != &::google::protobuf::internal::kEmptyString) {
    delete strdescription_;
  }
  if (striconfile_ != &::google::protobuf::internal::kEmptyString) {
    delete striconfile_;
  }
  if (strusingitemsound_ != &::google::protobuf::internal::kEmptyString) {
    delete strusingitemsound_;
  }
  if (strrare_ != &::google::protobuf::internal::kEmptyString) {
    delete strrare_;
  }
  if (strcasteffectpath_ != &::google::protobuf::internal::kEmptyString) {
    delete strcasteffectpath_;
  }
  if (strfireeffectpath_ != &::google::protobuf::internal::kEmptyString) {
    delete strfireeffectpath_;
  }
  if (strhiteffectpath_ != &::google::protobuf::internal::kEmptyString) {
    delete strhiteffectpath_;
  }
  if (strmodelpath_ != &::google::protobuf::internal::kEmptyString) {
    delete strmodelpath_;
  }
  if (strdisablemapid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdisablemapid_;
  }
  if (strsedskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete strsedskillid_;
  }
  if (this != default_instance_) {
  }
}

void SItem_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItem_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItem_Item_descriptor_;
}

const SItem_Item& SItem_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();  return *default_instance_;
}

SItem_Item* SItem_Item::default_instance_ = NULL;

SItem_Item* SItem_Item::New() const {
  return new SItem_Item;
}

void SItem_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    nusetime_ = 0;
    ncandrop_ = 0;
    nbill_ = 0;
    nmedals_ = 0;
    nvaluetype_ = 0;
    nvalue_ = 0;
    nreservemoneyflag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nquality_ = 0;
    if (has_stritemtype()) {
      if (stritemtype_ != &::google::protobuf::internal::kEmptyString) {
        stritemtype_->clear();
      }
    }
    nusesingtime_ = 0;
    nusertarget_ = 0;
    ncanmoved_ = 0;
    ncandeleted_ = 0;
    ncantrade_ = 0;
    ncansold_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ncanstored_ = 0;
    ncanbound_ = 0;
    nisexclusive_ = 0;
    nisexpendable_ = 0;
    ncolddowntype_ = 0;
    ncolddowntime_ = 0;
    if (has_stritemname()) {
      if (stritemname_ != &::google::protobuf::internal::kEmptyString) {
        stritemname_->clear();
      }
    }
    if (has_strdescription()) {
      if (strdescription_ != &::google::protobuf::internal::kEmptyString) {
        strdescription_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    nitemlevel_ = 0;
    if (has_striconfile()) {
      if (striconfile_ != &::google::protobuf::internal::kEmptyString) {
        striconfile_->clear();
      }
    }
    if (has_strusingitemsound()) {
      if (strusingitemsound_ != &::google::protobuf::internal::kEmptyString) {
        strusingitemsound_->clear();
      }
    }
    ndropitemmodel_ = 0;
    if (has_strrare()) {
      if (strrare_ != &::google::protobuf::internal::kEmptyString) {
        strrare_->clear();
      }
    }
    nifshoweqipeffect_ = 0;
    ncanlocked_ = 0;
    if (has_strcasteffectpath()) {
      if (strcasteffectpath_ != &::google::protobuf::internal::kEmptyString) {
        strcasteffectpath_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_strfireeffectpath()) {
      if (strfireeffectpath_ != &::google::protobuf::internal::kEmptyString) {
        strfireeffectpath_->clear();
      }
    }
    if (has_strhiteffectpath()) {
      if (strhiteffectpath_ != &::google::protobuf::internal::kEmptyString) {
        strhiteffectpath_->clear();
      }
    }
    niconid_ = 0;
    ncansplit_ = 0;
    nprocesstime_ = 0;
    if (has_strmodelpath()) {
      if (strmodelpath_ != &::google::protobuf::internal::kEmptyString) {
        strmodelpath_->clear();
      }
    }
    ncandrag_ = 0;
    if (has_strdisablemapid()) {
      if (strdisablemapid_ != &::google::protobuf::internal::kEmptyString) {
        strdisablemapid_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    nisraise_ = 0;
    if (has_strsedskillid()) {
      if (strsedskillid_ != &::google::protobuf::internal::kEmptyString) {
        strsedskillid_->clear();
      }
    }
    nalchemytype_ = 0;
    nusetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItem_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nUseTime;
        break;
      }
      
      // optional int32 nUseTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nusetime_)));
          set_has_nusetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCanDrop;
        break;
      }
      
      // optional int32 nCanDrop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanDrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncandrop_)));
          set_has_ncandrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nBill;
        break;
      }
      
      // optional int32 nBill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbill_)));
          set_has_nbill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nMedals;
        break;
      }
      
      // optional int32 nMedals = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMedals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmedals_)));
          set_has_nmedals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nValueType;
        break;
      }
      
      // optional int32 nValueType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nValueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvaluetype_)));
          set_has_nvaluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nValue;
        break;
      }
      
      // optional int32 nValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nvalue_)));
          set_has_nvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nReserveMoneyFlag;
        break;
      }
      
      // optional int32 nReserveMoneyFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nReserveMoneyFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nreservemoneyflag_)));
          set_has_nreservemoneyflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nQuality;
        break;
      }
      
      // optional int32 nQuality = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nquality_)));
          set_has_nquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_strItemType;
        break;
      }
      
      // optional bytes strItemType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strItemType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stritemtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nUseSingTime;
        break;
      }
      
      // optional int32 nUseSingTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUseSingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nusesingtime_)));
          set_has_nusesingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nUserTarget;
        break;
      }
      
      // optional int32 nUserTarget = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUserTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nusertarget_)));
          set_has_nusertarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_nCanMoved;
        break;
      }
      
      // optional int32 nCanMoved = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanMoved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncanmoved_)));
          set_has_ncanmoved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nCanDeleted;
        break;
      }
      
      // optional int32 nCanDeleted = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanDeleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncandeleted_)));
          set_has_ncandeleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_nCanTrade;
        break;
      }
      
      // optional int32 nCanTrade = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncantrade_)));
          set_has_ncantrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_nCanSold;
        break;
      }
      
      // optional int32 nCanSold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanSold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncansold_)));
          set_has_ncansold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_nCanStored;
        break;
      }
      
      // optional int32 nCanStored = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanStored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncanstored_)));
          set_has_ncanstored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nCanBound;
        break;
      }
      
      // optional int32 nCanBound = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanBound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncanbound_)));
          set_has_ncanbound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nIsExclusive;
        break;
      }
      
      // optional int32 nIsExclusive = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIsExclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nisexclusive_)));
          set_has_nisexclusive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_nIsExpendable;
        break;
      }
      
      // optional int32 nIsExpendable = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIsExpendable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nisexpendable_)));
          set_has_nisexpendable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_nColdDownType;
        break;
      }
      
      // optional int32 nColdDownType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nColdDownType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncolddowntype_)));
          set_has_ncolddowntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_nColdDownTime;
        break;
      }
      
      // optional int32 nColdDownTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nColdDownTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncolddowntime_)));
          set_has_ncolddowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_strItemName;
        break;
      }
      
      // optional bytes strItemName = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strItemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stritemname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_strDescription;
        break;
      }
      
      // optional bytes strDescription = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdescription()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nItemLevel;
        break;
      }
      
      // optional int32 nItemLevel = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemlevel_)));
          set_has_nitemlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_strIconFile;
        break;
      }
      
      // optional bytes strIconFile = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strIconFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_striconfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_strUsingItemSound;
        break;
      }
      
      // optional bytes strUsingItemSound = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strUsingItemSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strusingitemsound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nDropItemModel;
        break;
      }
      
      // optional int32 nDropItemModel = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDropItemModel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndropitemmodel_)));
          set_has_ndropitemmodel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_strRare;
        break;
      }
      
      // optional bytes strRare = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strrare()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_nIfShowEqipEffect;
        break;
      }
      
      // optional int32 nIfShowEqipEffect = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIfShowEqipEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nifshoweqipeffect_)));
          set_has_nifshoweqipeffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_nCanLocked;
        break;
      }
      
      // optional int32 nCanLocked = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncanlocked_)));
          set_has_ncanlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_strCastEffectPath;
        break;
      }
      
      // optional bytes strCastEffectPath = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCastEffectPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcasteffectpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_strFireEffectPath;
        break;
      }
      
      // optional bytes strFireEffectPath = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strFireEffectPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strfireeffectpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_strHitEffectPath;
        break;
      }
      
      // optional bytes strHitEffectPath = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strHitEffectPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strhiteffectpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_nIconID;
        break;
      }
      
      // optional int32 nIconID = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIconID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &niconid_)));
          set_has_niconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_nCanSplit;
        break;
      }
      
      // optional int32 nCanSplit = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanSplit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncansplit_)));
          set_has_ncansplit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_nprocessTime;
        break;
      }
      
      // optional int32 nprocessTime = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nprocessTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nprocesstime_)));
          set_has_nprocesstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_strModelPath;
        break;
      }
      
      // optional bytes strModelPath = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strModelPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmodelpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_nCanDrag;
        break;
      }
      
      // optional int32 nCanDrag = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCanDrag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncandrag_)));
          set_has_ncandrag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_strDisableMapID;
        break;
      }
      
      // optional bytes strDisableMapID = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDisableMapID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdisablemapid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_nIsRaise;
        break;
      }
      
      // optional int32 nIsRaise = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nIsRaise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nisraise_)));
          set_has_nisraise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_strSedSkillID;
        break;
      }
      
      // optional bytes strSedSkillID = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSedSkillID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strsedskillid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_nAlchemyType;
        break;
      }
      
      // optional int32 nAlchemyType = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAlchemyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nalchemytype_)));
          set_has_nalchemytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_nUseType;
        break;
      }
      
      // optional int32 nUseType = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nUseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nusetype_)));
          set_has_nusetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItem_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nID = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }
  
  // optional int32 nUseTime = 2;
  if (has_nusetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nusetime(), output);
  }
  
  // optional int32 nCanDrop = 3;
  if (has_ncandrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncandrop(), output);
  }
  
  // optional int32 nBill = 4;
  if (has_nbill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nbill(), output);
  }
  
  // optional int32 nMedals = 5;
  if (has_nmedals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nmedals(), output);
  }
  
  // optional int32 nValueType = 6;
  if (has_nvaluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nvaluetype(), output);
  }
  
  // optional int32 nValue = 7;
  if (has_nvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nvalue(), output);
  }
  
  // optional int32 nReserveMoneyFlag = 8;
  if (has_nreservemoneyflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nreservemoneyflag(), output);
  }
  
  // optional int32 nQuality = 9;
  if (has_nquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nquality(), output);
  }
  
  // optional bytes strItemType = 10;
  if (has_stritemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->stritemtype(), output);
  }
  
  // optional int32 nUseSingTime = 11;
  if (has_nusesingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nusesingtime(), output);
  }
  
  // optional int32 nUserTarget = 12;
  if (has_nusertarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nusertarget(), output);
  }
  
  // optional int32 nCanMoved = 13;
  if (has_ncanmoved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ncanmoved(), output);
  }
  
  // optional int32 nCanDeleted = 14;
  if (has_ncandeleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ncandeleted(), output);
  }
  
  // optional int32 nCanTrade = 15;
  if (has_ncantrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ncantrade(), output);
  }
  
  // optional int32 nCanSold = 16;
  if (has_ncansold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ncansold(), output);
  }
  
  // optional int32 nCanStored = 17;
  if (has_ncanstored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ncanstored(), output);
  }
  
  // optional int32 nCanBound = 18;
  if (has_ncanbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ncanbound(), output);
  }
  
  // optional int32 nIsExclusive = 19;
  if (has_nisexclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nisexclusive(), output);
  }
  
  // optional int32 nIsExpendable = 20;
  if (has_nisexpendable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->nisexpendable(), output);
  }
  
  // optional int32 nColdDownType = 21;
  if (has_ncolddowntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ncolddowntype(), output);
  }
  
  // optional int32 nColdDownTime = 22;
  if (has_ncolddowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ncolddowntime(), output);
  }
  
  // optional bytes strItemName = 23;
  if (has_stritemname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->stritemname(), output);
  }
  
  // optional bytes strDescription = 24;
  if (has_strdescription()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->strdescription(), output);
  }
  
  // optional int32 nItemLevel = 25;
  if (has_nitemlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nitemlevel(), output);
  }
  
  // optional bytes strIconFile = 26;
  if (has_striconfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      26, this->striconfile(), output);
  }
  
  // optional bytes strUsingItemSound = 27;
  if (has_strusingitemsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      27, this->strusingitemsound(), output);
  }
  
  // optional int32 nDropItemModel = 28;
  if (has_ndropitemmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ndropitemmodel(), output);
  }
  
  // optional bytes strRare = 29;
  if (has_strrare()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      29, this->strrare(), output);
  }
  
  // optional int32 nIfShowEqipEffect = 30;
  if (has_nifshoweqipeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->nifshoweqipeffect(), output);
  }
  
  // optional int32 nCanLocked = 31;
  if (has_ncanlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->ncanlocked(), output);
  }
  
  // optional bytes strCastEffectPath = 32;
  if (has_strcasteffectpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      32, this->strcasteffectpath(), output);
  }
  
  // optional bytes strFireEffectPath = 33;
  if (has_strfireeffectpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      33, this->strfireeffectpath(), output);
  }
  
  // optional bytes strHitEffectPath = 34;
  if (has_strhiteffectpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      34, this->strhiteffectpath(), output);
  }
  
  // optional int32 nIconID = 35;
  if (has_niconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->niconid(), output);
  }
  
  // optional int32 nCanSplit = 36;
  if (has_ncansplit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->ncansplit(), output);
  }
  
  // optional int32 nprocessTime = 37;
  if (has_nprocesstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->nprocesstime(), output);
  }
  
  // optional bytes strModelPath = 38;
  if (has_strmodelpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      38, this->strmodelpath(), output);
  }
  
  // optional int32 nCanDrag = 39;
  if (has_ncandrag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->ncandrag(), output);
  }
  
  // optional bytes strDisableMapID = 40;
  if (has_strdisablemapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->strdisablemapid(), output);
  }
  
  // optional int32 nIsRaise = 41;
  if (has_nisraise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->nisraise(), output);
  }
  
  // optional bytes strSedSkillID = 42;
  if (has_strsedskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      42, this->strsedskillid(), output);
  }
  
  // optional int32 nAlchemyType = 43;
  if (has_nalchemytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->nalchemytype(), output);
  }
  
  // optional int32 nUseType = 44;
  if (has_nusetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->nusetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItem_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nID = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }
  
  // optional int32 nUseTime = 2;
  if (has_nusetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nusetime(), target);
  }
  
  // optional int32 nCanDrop = 3;
  if (has_ncandrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ncandrop(), target);
  }
  
  // optional int32 nBill = 4;
  if (has_nbill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nbill(), target);
  }
  
  // optional int32 nMedals = 5;
  if (has_nmedals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nmedals(), target);
  }
  
  // optional int32 nValueType = 6;
  if (has_nvaluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nvaluetype(), target);
  }
  
  // optional int32 nValue = 7;
  if (has_nvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nvalue(), target);
  }
  
  // optional int32 nReserveMoneyFlag = 8;
  if (has_nreservemoneyflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nreservemoneyflag(), target);
  }
  
  // optional int32 nQuality = 9;
  if (has_nquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nquality(), target);
  }
  
  // optional bytes strItemType = 10;
  if (has_stritemtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->stritemtype(), target);
  }
  
  // optional int32 nUseSingTime = 11;
  if (has_nusesingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nusesingtime(), target);
  }
  
  // optional int32 nUserTarget = 12;
  if (has_nusertarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nusertarget(), target);
  }
  
  // optional int32 nCanMoved = 13;
  if (has_ncanmoved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ncanmoved(), target);
  }
  
  // optional int32 nCanDeleted = 14;
  if (has_ncandeleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ncandeleted(), target);
  }
  
  // optional int32 nCanTrade = 15;
  if (has_ncantrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ncantrade(), target);
  }
  
  // optional int32 nCanSold = 16;
  if (has_ncansold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ncansold(), target);
  }
  
  // optional int32 nCanStored = 17;
  if (has_ncanstored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ncanstored(), target);
  }
  
  // optional int32 nCanBound = 18;
  if (has_ncanbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ncanbound(), target);
  }
  
  // optional int32 nIsExclusive = 19;
  if (has_nisexclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nisexclusive(), target);
  }
  
  // optional int32 nIsExpendable = 20;
  if (has_nisexpendable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->nisexpendable(), target);
  }
  
  // optional int32 nColdDownType = 21;
  if (has_ncolddowntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ncolddowntype(), target);
  }
  
  // optional int32 nColdDownTime = 22;
  if (has_ncolddowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->ncolddowntime(), target);
  }
  
  // optional bytes strItemName = 23;
  if (has_stritemname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->stritemname(), target);
  }
  
  // optional bytes strDescription = 24;
  if (has_strdescription()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->strdescription(), target);
  }
  
  // optional int32 nItemLevel = 25;
  if (has_nitemlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nitemlevel(), target);
  }
  
  // optional bytes strIconFile = 26;
  if (has_striconfile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->striconfile(), target);
  }
  
  // optional bytes strUsingItemSound = 27;
  if (has_strusingitemsound()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->strusingitemsound(), target);
  }
  
  // optional int32 nDropItemModel = 28;
  if (has_ndropitemmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ndropitemmodel(), target);
  }
  
  // optional bytes strRare = 29;
  if (has_strrare()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->strrare(), target);
  }
  
  // optional int32 nIfShowEqipEffect = 30;
  if (has_nifshoweqipeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->nifshoweqipeffect(), target);
  }
  
  // optional int32 nCanLocked = 31;
  if (has_ncanlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->ncanlocked(), target);
  }
  
  // optional bytes strCastEffectPath = 32;
  if (has_strcasteffectpath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        32, this->strcasteffectpath(), target);
  }
  
  // optional bytes strFireEffectPath = 33;
  if (has_strfireeffectpath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->strfireeffectpath(), target);
  }
  
  // optional bytes strHitEffectPath = 34;
  if (has_strhiteffectpath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        34, this->strhiteffectpath(), target);
  }
  
  // optional int32 nIconID = 35;
  if (has_niconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->niconid(), target);
  }
  
  // optional int32 nCanSplit = 36;
  if (has_ncansplit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->ncansplit(), target);
  }
  
  // optional int32 nprocessTime = 37;
  if (has_nprocesstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->nprocesstime(), target);
  }
  
  // optional bytes strModelPath = 38;
  if (has_strmodelpath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        38, this->strmodelpath(), target);
  }
  
  // optional int32 nCanDrag = 39;
  if (has_ncandrag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->ncandrag(), target);
  }
  
  // optional bytes strDisableMapID = 40;
  if (has_strdisablemapid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->strdisablemapid(), target);
  }
  
  // optional int32 nIsRaise = 41;
  if (has_nisraise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->nisraise(), target);
  }
  
  // optional bytes strSedSkillID = 42;
  if (has_strsedskillid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->strsedskillid(), target);
  }
  
  // optional int32 nAlchemyType = 43;
  if (has_nalchemytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->nalchemytype(), target);
  }
  
  // optional int32 nUseType = 44;
  if (has_nusetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->nusetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItem_Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nID = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }
    
    // optional int32 nUseTime = 2;
    if (has_nusetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nusetime());
    }
    
    // optional int32 nCanDrop = 3;
    if (has_ncandrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncandrop());
    }
    
    // optional int32 nBill = 4;
    if (has_nbill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbill());
    }
    
    // optional int32 nMedals = 5;
    if (has_nmedals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmedals());
    }
    
    // optional int32 nValueType = 6;
    if (has_nvaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nvaluetype());
    }
    
    // optional int32 nValue = 7;
    if (has_nvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nvalue());
    }
    
    // optional int32 nReserveMoneyFlag = 8;
    if (has_nreservemoneyflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nreservemoneyflag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nQuality = 9;
    if (has_nquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nquality());
    }
    
    // optional bytes strItemType = 10;
    if (has_stritemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stritemtype());
    }
    
    // optional int32 nUseSingTime = 11;
    if (has_nusesingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nusesingtime());
    }
    
    // optional int32 nUserTarget = 12;
    if (has_nusertarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nusertarget());
    }
    
    // optional int32 nCanMoved = 13;
    if (has_ncanmoved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncanmoved());
    }
    
    // optional int32 nCanDeleted = 14;
    if (has_ncandeleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncandeleted());
    }
    
    // optional int32 nCanTrade = 15;
    if (has_ncantrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncantrade());
    }
    
    // optional int32 nCanSold = 16;
    if (has_ncansold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncansold());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 nCanStored = 17;
    if (has_ncanstored()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncanstored());
    }
    
    // optional int32 nCanBound = 18;
    if (has_ncanbound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncanbound());
    }
    
    // optional int32 nIsExclusive = 19;
    if (has_nisexclusive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nisexclusive());
    }
    
    // optional int32 nIsExpendable = 20;
    if (has_nisexpendable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nisexpendable());
    }
    
    // optional int32 nColdDownType = 21;
    if (has_ncolddowntype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncolddowntype());
    }
    
    // optional int32 nColdDownTime = 22;
    if (has_ncolddowntime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncolddowntime());
    }
    
    // optional bytes strItemName = 23;
    if (has_stritemname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stritemname());
    }
    
    // optional bytes strDescription = 24;
    if (has_strdescription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdescription());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nItemLevel = 25;
    if (has_nitemlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemlevel());
    }
    
    // optional bytes strIconFile = 26;
    if (has_striconfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->striconfile());
    }
    
    // optional bytes strUsingItemSound = 27;
    if (has_strusingitemsound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strusingitemsound());
    }
    
    // optional int32 nDropItemModel = 28;
    if (has_ndropitemmodel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndropitemmodel());
    }
    
    // optional bytes strRare = 29;
    if (has_strrare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strrare());
    }
    
    // optional int32 nIfShowEqipEffect = 30;
    if (has_nifshoweqipeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nifshoweqipeffect());
    }
    
    // optional int32 nCanLocked = 31;
    if (has_ncanlocked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncanlocked());
    }
    
    // optional bytes strCastEffectPath = 32;
    if (has_strcasteffectpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcasteffectpath());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bytes strFireEffectPath = 33;
    if (has_strfireeffectpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strfireeffectpath());
    }
    
    // optional bytes strHitEffectPath = 34;
    if (has_strhiteffectpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strhiteffectpath());
    }
    
    // optional int32 nIconID = 35;
    if (has_niconid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->niconid());
    }
    
    // optional int32 nCanSplit = 36;
    if (has_ncansplit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncansplit());
    }
    
    // optional int32 nprocessTime = 37;
    if (has_nprocesstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nprocesstime());
    }
    
    // optional bytes strModelPath = 38;
    if (has_strmodelpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmodelpath());
    }
    
    // optional int32 nCanDrag = 39;
    if (has_ncandrag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncandrag());
    }
    
    // optional bytes strDisableMapID = 40;
    if (has_strdisablemapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdisablemapid());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 nIsRaise = 41;
    if (has_nisraise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nisraise());
    }
    
    // optional bytes strSedSkillID = 42;
    if (has_strsedskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strsedskillid());
    }
    
    // optional int32 nAlchemyType = 43;
    if (has_nalchemytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nalchemytype());
    }
    
    // optional int32 nUseType = 44;
    if (has_nusetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nusetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItem_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItem_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItem_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItem_Item::MergeFrom(const SItem_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nusetime()) {
      set_nusetime(from.nusetime());
    }
    if (from.has_ncandrop()) {
      set_ncandrop(from.ncandrop());
    }
    if (from.has_nbill()) {
      set_nbill(from.nbill());
    }
    if (from.has_nmedals()) {
      set_nmedals(from.nmedals());
    }
    if (from.has_nvaluetype()) {
      set_nvaluetype(from.nvaluetype());
    }
    if (from.has_nvalue()) {
      set_nvalue(from.nvalue());
    }
    if (from.has_nreservemoneyflag()) {
      set_nreservemoneyflag(from.nreservemoneyflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nquality()) {
      set_nquality(from.nquality());
    }
    if (from.has_stritemtype()) {
      set_stritemtype(from.stritemtype());
    }
    if (from.has_nusesingtime()) {
      set_nusesingtime(from.nusesingtime());
    }
    if (from.has_nusertarget()) {
      set_nusertarget(from.nusertarget());
    }
    if (from.has_ncanmoved()) {
      set_ncanmoved(from.ncanmoved());
    }
    if (from.has_ncandeleted()) {
      set_ncandeleted(from.ncandeleted());
    }
    if (from.has_ncantrade()) {
      set_ncantrade(from.ncantrade());
    }
    if (from.has_ncansold()) {
      set_ncansold(from.ncansold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ncanstored()) {
      set_ncanstored(from.ncanstored());
    }
    if (from.has_ncanbound()) {
      set_ncanbound(from.ncanbound());
    }
    if (from.has_nisexclusive()) {
      set_nisexclusive(from.nisexclusive());
    }
    if (from.has_nisexpendable()) {
      set_nisexpendable(from.nisexpendable());
    }
    if (from.has_ncolddowntype()) {
      set_ncolddowntype(from.ncolddowntype());
    }
    if (from.has_ncolddowntime()) {
      set_ncolddowntime(from.ncolddowntime());
    }
    if (from.has_stritemname()) {
      set_stritemname(from.stritemname());
    }
    if (from.has_strdescription()) {
      set_strdescription(from.strdescription());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nitemlevel()) {
      set_nitemlevel(from.nitemlevel());
    }
    if (from.has_striconfile()) {
      set_striconfile(from.striconfile());
    }
    if (from.has_strusingitemsound()) {
      set_strusingitemsound(from.strusingitemsound());
    }
    if (from.has_ndropitemmodel()) {
      set_ndropitemmodel(from.ndropitemmodel());
    }
    if (from.has_strrare()) {
      set_strrare(from.strrare());
    }
    if (from.has_nifshoweqipeffect()) {
      set_nifshoweqipeffect(from.nifshoweqipeffect());
    }
    if (from.has_ncanlocked()) {
      set_ncanlocked(from.ncanlocked());
    }
    if (from.has_strcasteffectpath()) {
      set_strcasteffectpath(from.strcasteffectpath());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_strfireeffectpath()) {
      set_strfireeffectpath(from.strfireeffectpath());
    }
    if (from.has_strhiteffectpath()) {
      set_strhiteffectpath(from.strhiteffectpath());
    }
    if (from.has_niconid()) {
      set_niconid(from.niconid());
    }
    if (from.has_ncansplit()) {
      set_ncansplit(from.ncansplit());
    }
    if (from.has_nprocesstime()) {
      set_nprocesstime(from.nprocesstime());
    }
    if (from.has_strmodelpath()) {
      set_strmodelpath(from.strmodelpath());
    }
    if (from.has_ncandrag()) {
      set_ncandrag(from.ncandrag());
    }
    if (from.has_strdisablemapid()) {
      set_strdisablemapid(from.strdisablemapid());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_nisraise()) {
      set_nisraise(from.nisraise());
    }
    if (from.has_strsedskillid()) {
      set_strsedskillid(from.strsedskillid());
    }
    if (from.has_nalchemytype()) {
      set_nalchemytype(from.nalchemytype());
    }
    if (from.has_nusetype()) {
      set_nusetype(from.nusetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItem_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItem_Item::CopyFrom(const SItem_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItem_Item::IsInitialized() const {
  
  return true;
}

void SItem_Item::Swap(SItem_Item* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nusetime_, other->nusetime_);
    std::swap(ncandrop_, other->ncandrop_);
    std::swap(nbill_, other->nbill_);
    std::swap(nmedals_, other->nmedals_);
    std::swap(nvaluetype_, other->nvaluetype_);
    std::swap(nvalue_, other->nvalue_);
    std::swap(nreservemoneyflag_, other->nreservemoneyflag_);
    std::swap(nquality_, other->nquality_);
    std::swap(stritemtype_, other->stritemtype_);
    std::swap(nusesingtime_, other->nusesingtime_);
    std::swap(nusertarget_, other->nusertarget_);
    std::swap(ncanmoved_, other->ncanmoved_);
    std::swap(ncandeleted_, other->ncandeleted_);
    std::swap(ncantrade_, other->ncantrade_);
    std::swap(ncansold_, other->ncansold_);
    std::swap(ncanstored_, other->ncanstored_);
    std::swap(ncanbound_, other->ncanbound_);
    std::swap(nisexclusive_, other->nisexclusive_);
    std::swap(nisexpendable_, other->nisexpendable_);
    std::swap(ncolddowntype_, other->ncolddowntype_);
    std::swap(ncolddowntime_, other->ncolddowntime_);
    std::swap(stritemname_, other->stritemname_);
    std::swap(strdescription_, other->strdescription_);
    std::swap(nitemlevel_, other->nitemlevel_);
    std::swap(striconfile_, other->striconfile_);
    std::swap(strusingitemsound_, other->strusingitemsound_);
    std::swap(ndropitemmodel_, other->ndropitemmodel_);
    std::swap(strrare_, other->strrare_);
    std::swap(nifshoweqipeffect_, other->nifshoweqipeffect_);
    std::swap(ncanlocked_, other->ncanlocked_);
    std::swap(strcasteffectpath_, other->strcasteffectpath_);
    std::swap(strfireeffectpath_, other->strfireeffectpath_);
    std::swap(strhiteffectpath_, other->strhiteffectpath_);
    std::swap(niconid_, other->niconid_);
    std::swap(ncansplit_, other->ncansplit_);
    std::swap(nprocesstime_, other->nprocesstime_);
    std::swap(strmodelpath_, other->strmodelpath_);
    std::swap(ncandrag_, other->ncandrag_);
    std::swap(strdisablemapid_, other->strdisablemapid_);
    std::swap(nisraise_, other->nisraise_);
    std::swap(strsedskillid_, other->strsedskillid_);
    std::swap(nalchemytype_, other->nalchemytype_);
    std::swap(nusetype_, other->nusetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItem_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItem_Item_descriptor_;
  metadata.reflection = SItem_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SItem_ItemDataPool::kDataFieldNumber;
#endif  // !_MSC_VER

SItem_ItemDataPool::SItem_ItemDataPool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SItem_ItemDataPool::InitAsDefaultInstance() {
}

SItem_ItemDataPool::SItem_ItemDataPool(const SItem_ItemDataPool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SItem_ItemDataPool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SItem_ItemDataPool::~SItem_ItemDataPool() {
  SharedDtor();
}

void SItem_ItemDataPool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SItem_ItemDataPool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SItem_ItemDataPool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SItem_ItemDataPool_descriptor_;
}

const SItem_ItemDataPool& SItem_ItemDataPool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Item_2eproto();  return *default_instance_;
}

SItem_ItemDataPool* SItem_ItemDataPool::default_instance_ = NULL;

SItem_ItemDataPool* SItem_ItemDataPool::New() const {
  return new SItem_ItemDataPool;
}

void SItem_ItemDataPool::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SItem_ItemDataPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SItem_Item data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SItem_ItemDataPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SItem_Item data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SItem_ItemDataPool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SItem_Item data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SItem_ItemDataPool::ByteSize() const {
  int total_size = 0;
  
  // repeated .SItem_Item data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SItem_ItemDataPool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SItem_ItemDataPool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SItem_ItemDataPool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SItem_ItemDataPool::MergeFrom(const SItem_ItemDataPool& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SItem_ItemDataPool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SItem_ItemDataPool::CopyFrom(const SItem_ItemDataPool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItem_ItemDataPool::IsInitialized() const {
  
  return true;
}

void SItem_ItemDataPool::Swap(SItem_ItemDataPool* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SItem_ItemDataPool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SItem_ItemDataPool_descriptor_;
  metadata.reflection = SItem_ItemDataPool_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
